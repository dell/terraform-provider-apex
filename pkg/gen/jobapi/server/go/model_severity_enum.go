/*
 * APEX Orchestration Platform - Job Management System (JMS) API
 *
 * Provides management and visibility for APEX Orchestration Platform Jobs
 *
 * API version: IGNORED - see resource tag's x-api-version for the specific version of this resource.
 * Contact: apex.mars@dell.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server


import (
	"fmt"
)


// SeverityEnum : The severity of the condition. * INFO - Information that may be of use in understanding the failure. It is not a problem to fix. * WARNING - A condition that isn't a failure, but may be unexpected or a contributing factor. It may be necessary to fix the condition to successfully retry the request. * ERROR - An actual failure condition through which the request could not continue. * CRITICAL - A failure with significant impact to the system. Normally failed commands roll back and are just ERROR, but may be used for exceptional cases. 
type SeverityEnum string

// List of SeverityEnum
const (
	SEVERITYENUM_INFO SeverityEnum = "INFO"
	SEVERITYENUM_WARNING SeverityEnum = "WARNING"
	SEVERITYENUM_ERROR SeverityEnum = "ERROR"
	SEVERITYENUM_CRITICAL SeverityEnum = "CRITICAL"
)

// AllowedSeverityEnumEnumValues is all the allowed values of SeverityEnum enum
var AllowedSeverityEnumEnumValues = []SeverityEnum{
	"INFO",
	"WARNING",
	"ERROR",
	"CRITICAL",
}

// validSeverityEnumEnumValue provides a map of SeverityEnums for fast verification of use input
var validSeverityEnumEnumValues = map[SeverityEnum]struct{}{
	"INFO": {},
	"WARNING": {},
	"ERROR": {},
	"CRITICAL": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SeverityEnum) IsValid() bool {
	_, ok := validSeverityEnumEnumValues[v]
	return ok
}

// NewSeverityEnumFromValue returns a pointer to a valid SeverityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSeverityEnumFromValue(v string) (SeverityEnum, error) {
	ev := SeverityEnum(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for SeverityEnum: valid values are %v", v, AllowedSeverityEnumEnumValues)
	}
}



// AssertSeverityEnumRequired checks if the required fields are not zero-ed
func AssertSeverityEnumRequired(obj SeverityEnum) error {
	return nil
}

// AssertSeverityEnumConstraints checks if the values respects the defined constraints
func AssertSeverityEnumConstraints(obj SeverityEnum) error {
	return nil
}
