/*
APEX Orchestration Platform - Job Management System (JMS) API

Provides management and visibility for APEX Orchestration Platform Jobs

API version: IGNORED - see resource tag's x-api-version for the specific version of this resource.
Contact: apex.mars@dell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ResponseContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseContent{}

// ResponseContent Generic response object. This is used as a generic type for response bodies that job instances must preserve for clients to query in the future. 
type ResponseContent struct {
	// This is the name of the OpenAPI definition of the specific response body in the response_body property. 
	OpenapiType *string `json:"openapi_type,omitempty"`
	// The response body that is returned by this job. Available when in a terminal state (SUCCEEDED, FAILED, COMPLETED_WITH_MESSAGES). 
	Body map[string]interface{} `json:"body,omitempty"`
}

// NewResponseContent instantiates a new ResponseContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseContent() *ResponseContent {
	this := ResponseContent{}
	return &this
}

// NewResponseContentWithDefaults instantiates a new ResponseContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseContentWithDefaults() *ResponseContent {
	this := ResponseContent{}
	return &this
}

// GetOpenapiType returns the OpenapiType field value if set, zero value otherwise.
func (o *ResponseContent) GetOpenapiType() string {
	if o == nil || IsNil(o.OpenapiType) {
		var ret string
		return ret
	}
	return *o.OpenapiType
}

// GetOpenapiTypeOk returns a tuple with the OpenapiType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseContent) GetOpenapiTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OpenapiType) {
		return nil, false
	}
	return o.OpenapiType, true
}

// HasOpenapiType returns a boolean if a field has been set.
func (o *ResponseContent) HasOpenapiType() bool {
	if o != nil && !IsNil(o.OpenapiType) {
		return true
	}

	return false
}

// SetOpenapiType gets a reference to the given string and assigns it to the OpenapiType field.
func (o *ResponseContent) SetOpenapiType(v string) {
	o.OpenapiType = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *ResponseContent) GetBody() map[string]interface{} {
	if o == nil || IsNil(o.Body) {
		var ret map[string]interface{}
		return ret
	}
	return o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseContent) GetBodyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Body) {
		return map[string]interface{}{}, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *ResponseContent) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given map[string]interface{} and assigns it to the Body field.
func (o *ResponseContent) SetBody(v map[string]interface{}) {
	o.Body = v
}

func (o ResponseContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpenapiType) {
		toSerialize["openapi_type"] = o.OpenapiType
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	return toSerialize, nil
}

type NullableResponseContent struct {
	value *ResponseContent
	isSet bool
}

func (v NullableResponseContent) Get() *ResponseContent {
	return v.value
}

func (v *NullableResponseContent) Set(val *ResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseContent(val *ResponseContent) *NullableResponseContent {
	return &NullableResponseContent{value: val, isSet: true}
}

func (v NullableResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


