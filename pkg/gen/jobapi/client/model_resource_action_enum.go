/*
APEX Orchestration Platform - Job Management System (JMS) API

Provides management and visibility for APEX Orchestration Platform Jobs

API version: IGNORED - see resource tag's x-api-version for the specific version of this resource.
Contact: apex.mars@dell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ResourceActionEnum User-specified action to be performed on the given resource.
type ResourceActionEnum string

// List of ResourceActionEnum
const (
	RESOURCEACTIONENUM_OTHER_ACTION ResourceActionEnum = "OTHER_ACTION"
	RESOURCEACTIONENUM_CREATE ResourceActionEnum = "create"
	RESOURCEACTIONENUM_MODIFY ResourceActionEnum = "modify"
	RESOURCEACTIONENUM_DELETE ResourceActionEnum = "delete"
	RESOURCEACTIONENUM_PAUSE ResourceActionEnum = "pause"
	RESOURCEACTIONENUM_RESUME ResourceActionEnum = "resume"
	RESOURCEACTIONENUM_CANCEL ResourceActionEnum = "cancel"
	RESOURCEACTIONENUM_LOGIN ResourceActionEnum = "login"
	RESOURCEACTIONENUM_LOGOUT ResourceActionEnum = "logout"
	RESOURCEACTIONENUM_GENERATE_CSR ResourceActionEnum = "generate-csr"
	RESOURCEACTIONENUM_GENERATE_CSR_PKCS10 ResourceActionEnum = "generate-csr-pkcs10"
	RESOURCEACTIONENUM_QUERY ResourceActionEnum = "query"
	RESOURCEACTIONENUM_REPORT_FAILED_MESSAGES ResourceActionEnum = "report-failed-messages"
	RESOURCEACTIONENUM_TEST ResourceActionEnum = "test"
	RESOURCEACTIONENUM_RESEND ResourceActionEnum = "resend"
	RESOURCEACTIONENUM_CHALLENGE_PROOF_OF_POSSESSION ResourceActionEnum = "challenge-proof-of-possession"
	RESOURCEACTIONENUM_CONFIGURE ResourceActionEnum = "configure"
	RESOURCEACTIONENUM_EXTEND_TRIAL ResourceActionEnum = "extend-trial"
	RESOURCEACTIONENUM_CHECK_FOR_ENTITLEMENTS ResourceActionEnum = "check-for-entitlements"
	RESOURCEACTIONENUM_SEND_TEST_ALERT ResourceActionEnum = "send-test-alert"
	RESOURCEACTIONENUM_INSTALL ResourceActionEnum = "install"
	RESOURCEACTIONENUM_CHECK_FOR_UPDATES ResourceActionEnum = "check-for-updates"
	RESOURCEACTIONENUM_PRE_UPGRADE_HEALTH_CHECK ResourceActionEnum = "pre-upgrade-health-check"
	RESOURCEACTIONENUM_DOWNLOAD ResourceActionEnum = "download"
	RESOURCEACTIONENUM_GENERATE_TRUST_POLICY ResourceActionEnum = "generate-trust-policy"
	RESOURCEACTIONENUM_REFRESH ResourceActionEnum = "refresh"
	RESOURCEACTIONENUM_UNMAP ResourceActionEnum = "unmap"
	RESOURCEACTIONENUM_MAP ResourceActionEnum = "map"
	RESOURCEACTIONENUM_COPY ResourceActionEnum = "copy"
	RESOURCEACTIONENUM_INITIALIZE_TRUST ResourceActionEnum = "initialize-trust"
	RESOURCEACTIONENUM_ACTIVATE ResourceActionEnum = "activate"
)

// All allowed values of ResourceActionEnum enum
var AllowedResourceActionEnumEnumValues = []ResourceActionEnum{
	"OTHER_ACTION",
	"create",
	"modify",
	"delete",
	"pause",
	"resume",
	"cancel",
	"login",
	"logout",
	"generate-csr",
	"generate-csr-pkcs10",
	"query",
	"report-failed-messages",
	"test",
	"resend",
	"challenge-proof-of-possession",
	"configure",
	"extend-trial",
	"check-for-entitlements",
	"send-test-alert",
	"install",
	"check-for-updates",
	"pre-upgrade-health-check",
	"download",
	"generate-trust-policy",
	"refresh",
	"unmap",
	"map",
	"copy",
	"initialize-trust",
	"activate",
}

func (v *ResourceActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceActionEnum(value)
	for _, existing := range AllowedResourceActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceActionEnum", value)
}

// NewResourceActionEnumFromValue returns a pointer to a valid ResourceActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceActionEnumFromValue(v string) (*ResourceActionEnum, error) {
	ev := ResourceActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceActionEnum: valid values are %v", v, AllowedResourceActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceActionEnum) IsValid() bool {
	for _, existing := range AllowedResourceActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceActionEnum value
func (v ResourceActionEnum) Ptr() *ResourceActionEnum {
	return &v
}

type NullableResourceActionEnum struct {
	value *ResourceActionEnum
	isSet bool
}

func (v NullableResourceActionEnum) Get() *ResourceActionEnum {
	return v.value
}

func (v *NullableResourceActionEnum) Set(val *ResourceActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceActionEnum(val *ResourceActionEnum) *NullableResourceActionEnum {
	return &NullableResourceActionEnum{value: val, isSet: true}
}

func (v NullableResourceActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

