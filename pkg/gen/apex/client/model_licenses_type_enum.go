/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// LicensesTypeEnum The various types of licenses: * PERPETUAL - Perpetual licenses never expire but do not include support. * SUBSCRIPTION - Subscription licenses include support. * EVALUATION - Evaluation licenses do not include support. 
type LicensesTypeEnum string

// List of LicensesTypeEnum
const (
	LICENSESTYPEENUM_PERPETUAL LicensesTypeEnum = "PERPETUAL"
	LICENSESTYPEENUM_SUBSCRIPTION LicensesTypeEnum = "SUBSCRIPTION"
	LICENSESTYPEENUM_EVALUATION LicensesTypeEnum = "EVALUATION"
)

// All allowed values of LicensesTypeEnum enum
var AllowedLicensesTypeEnumEnumValues = []LicensesTypeEnum{
	"PERPETUAL",
	"SUBSCRIPTION",
	"EVALUATION",
}

func (v *LicensesTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LicensesTypeEnum(value)
	for _, existing := range AllowedLicensesTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LicensesTypeEnum", value)
}

// NewLicensesTypeEnumFromValue returns a pointer to a valid LicensesTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicensesTypeEnumFromValue(v string) (*LicensesTypeEnum, error) {
	ev := LicensesTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LicensesTypeEnum: valid values are %v", v, AllowedLicensesTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicensesTypeEnum) IsValid() bool {
	for _, existing := range AllowedLicensesTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LicensesTypeEnum value
func (v LicensesTypeEnum) Ptr() *LicensesTypeEnum {
	return &v
}

type NullableLicensesTypeEnum struct {
	value *LicensesTypeEnum
	isSet bool
}

func (v NullableLicensesTypeEnum) Get() *LicensesTypeEnum {
	return v.value
}

func (v *NullableLicensesTypeEnum) Set(val *LicensesTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensesTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensesTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensesTypeEnum(val *LicensesTypeEnum) *NullableLicensesTypeEnum {
	return &NullableLicensesTypeEnum{value: val, isSet: true}
}

func (v NullableLicensesTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensesTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

