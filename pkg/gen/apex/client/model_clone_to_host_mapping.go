/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CloneToHostMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloneToHostMapping{}

// CloneToHostMapping This represents the mapping of a repurposed (clone) storage object to a host (presumably using the clone for some analytical workload).
type CloneToHostMapping struct {
	// Name of host/SDC to be mapped to the clone
	HostName string `json:"host_name"`
	// IP Address of host
	HostIp string `json:"host_ip"`
	// Identifier of the host
	HostId string `json:"host_id"`
	// This is a host mappings id generated by APEX Navigator for Multicloud Storage.
	Id *string `json:"id,omitempty"`
	// NVMe qualified name. Only applicable if host_initiator_protocol is NVMe.
	Nqn *string `json:"nqn,omitempty"`
	HostInitiatorProtocol *HostInitiatorProtocolEnum `json:"host_initiator_protocol,omitempty"`
}

type _CloneToHostMapping CloneToHostMapping

// NewCloneToHostMapping instantiates a new CloneToHostMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneToHostMapping(hostName string, hostIp string, hostId string) *CloneToHostMapping {
	this := CloneToHostMapping{}
	this.HostName = hostName
	this.HostIp = hostIp
	this.HostId = hostId
	return &this
}

// NewCloneToHostMappingWithDefaults instantiates a new CloneToHostMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneToHostMappingWithDefaults() *CloneToHostMapping {
	this := CloneToHostMapping{}
	return &this
}

// GetHostName returns the HostName field value
func (o *CloneToHostMapping) GetHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value
// and a boolean to check if the value has been set.
func (o *CloneToHostMapping) GetHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostName, true
}

// SetHostName sets field value
func (o *CloneToHostMapping) SetHostName(v string) {
	o.HostName = v
}

// GetHostIp returns the HostIp field value
func (o *CloneToHostMapping) GetHostIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostIp
}

// GetHostIpOk returns a tuple with the HostIp field value
// and a boolean to check if the value has been set.
func (o *CloneToHostMapping) GetHostIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostIp, true
}

// SetHostIp sets field value
func (o *CloneToHostMapping) SetHostIp(v string) {
	o.HostIp = v
}

// GetHostId returns the HostId field value
func (o *CloneToHostMapping) GetHostId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value
// and a boolean to check if the value has been set.
func (o *CloneToHostMapping) GetHostIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostId, true
}

// SetHostId sets field value
func (o *CloneToHostMapping) SetHostId(v string) {
	o.HostId = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CloneToHostMapping) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneToHostMapping) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CloneToHostMapping) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CloneToHostMapping) SetId(v string) {
	o.Id = &v
}

// GetNqn returns the Nqn field value if set, zero value otherwise.
func (o *CloneToHostMapping) GetNqn() string {
	if o == nil || IsNil(o.Nqn) {
		var ret string
		return ret
	}
	return *o.Nqn
}

// GetNqnOk returns a tuple with the Nqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneToHostMapping) GetNqnOk() (*string, bool) {
	if o == nil || IsNil(o.Nqn) {
		return nil, false
	}
	return o.Nqn, true
}

// HasNqn returns a boolean if a field has been set.
func (o *CloneToHostMapping) HasNqn() bool {
	if o != nil && !IsNil(o.Nqn) {
		return true
	}

	return false
}

// SetNqn gets a reference to the given string and assigns it to the Nqn field.
func (o *CloneToHostMapping) SetNqn(v string) {
	o.Nqn = &v
}

// GetHostInitiatorProtocol returns the HostInitiatorProtocol field value if set, zero value otherwise.
func (o *CloneToHostMapping) GetHostInitiatorProtocol() HostInitiatorProtocolEnum {
	if o == nil || IsNil(o.HostInitiatorProtocol) {
		var ret HostInitiatorProtocolEnum
		return ret
	}
	return *o.HostInitiatorProtocol
}

// GetHostInitiatorProtocolOk returns a tuple with the HostInitiatorProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneToHostMapping) GetHostInitiatorProtocolOk() (*HostInitiatorProtocolEnum, bool) {
	if o == nil || IsNil(o.HostInitiatorProtocol) {
		return nil, false
	}
	return o.HostInitiatorProtocol, true
}

// HasHostInitiatorProtocol returns a boolean if a field has been set.
func (o *CloneToHostMapping) HasHostInitiatorProtocol() bool {
	if o != nil && !IsNil(o.HostInitiatorProtocol) {
		return true
	}

	return false
}

// SetHostInitiatorProtocol gets a reference to the given HostInitiatorProtocolEnum and assigns it to the HostInitiatorProtocol field.
func (o *CloneToHostMapping) SetHostInitiatorProtocol(v HostInitiatorProtocolEnum) {
	o.HostInitiatorProtocol = &v
}

func (o CloneToHostMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloneToHostMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_name"] = o.HostName
	toSerialize["host_ip"] = o.HostIp
	toSerialize["host_id"] = o.HostId
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Nqn) {
		toSerialize["nqn"] = o.Nqn
	}
	if !IsNil(o.HostInitiatorProtocol) {
		toSerialize["host_initiator_protocol"] = o.HostInitiatorProtocol
	}
	return toSerialize, nil
}

func (o *CloneToHostMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_name",
		"host_ip",
		"host_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloneToHostMapping := _CloneToHostMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloneToHostMapping)

	if err != nil {
		return err
	}

	*o = CloneToHostMapping(varCloneToHostMapping)

	return err
}

type NullableCloneToHostMapping struct {
	value *CloneToHostMapping
	isSet bool
}

func (v NullableCloneToHostMapping) Get() *CloneToHostMapping {
	return v.value
}

func (v *NullableCloneToHostMapping) Set(val *CloneToHostMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneToHostMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneToHostMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneToHostMapping(val *CloneToHostMapping) *NullableCloneToHostMapping {
	return &NullableCloneToHostMapping{value: val, isSet: true}
}

func (v NullableCloneToHostMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneToHostMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


