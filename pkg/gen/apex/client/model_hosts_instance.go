/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostsInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostsInstance{}

// HostsInstance The host object.
type HostsInstance struct {
	// Host identifier.
	Id string `json:"id"`
	// Unique identifier for the system that the host is connected to.
	SystemId *string `json:"system_id,omitempty"`
	// Product type of the system.
	SystemType *string `json:"system_type,omitempty"`
	// Description of the host.
	Description *string `json:"description,omitempty"`
	// Number of initiators that are connected between the host or server and the monitored system.
	InitiatorCount *int64 `json:"initiator_count,omitempty"`
	// Type of initiator (FC or iSCSI) that the host or server uses to connect to a monitored system.
	InitiatorProtocol *string `json:"initiator_protocol,omitempty"`
	// Number of health issues that are present on the host or server.
	IssueCount *int64 `json:"issue_count,omitempty"`
	// Name of the host or server.
	Name *string `json:"name,omitempty"`
	// Identifier of the host, defined by the system.
	NativeId *string `json:"native_id,omitempty"`
	// IPv4 or IPv6 IP addresses, domain names, or netgroup name associated with the host or server.
	NetworkAddresses *string `json:"network_addresses,omitempty"`
	// Type of the host.
	Type *string `json:"type,omitempty"`
	// Operating system of the host or server.
	OperatingSystem *string `json:"operating_system,omitempty"`
	// Model of the system.
	SystemModel *string `json:"system_model,omitempty"`
	// Name of the system.
	SystemName *string `json:"system_name,omitempty"`
	// Total size of all LUNs or Volumes that are provisioned to the host or server from the system - Unit: bytes
	TotalSize *int64 `json:"total_size,omitempty"`
}

type _HostsInstance HostsInstance

// NewHostsInstance instantiates a new HostsInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostsInstance(id string) *HostsInstance {
	this := HostsInstance{}
	this.Id = id
	return &this
}

// NewHostsInstanceWithDefaults instantiates a new HostsInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostsInstanceWithDefaults() *HostsInstance {
	this := HostsInstance{}
	return &this
}

// GetId returns the Id field value
func (o *HostsInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HostsInstance) SetId(v string) {
	o.Id = v
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *HostsInstance) GetSystemId() string {
	if o == nil || IsNil(o.SystemId) {
		var ret string
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *HostsInstance) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given string and assigns it to the SystemId field.
func (o *HostsInstance) SetSystemId(v string) {
	o.SystemId = &v
}

// GetSystemType returns the SystemType field value if set, zero value otherwise.
func (o *HostsInstance) GetSystemType() string {
	if o == nil || IsNil(o.SystemType) {
		var ret string
		return ret
	}
	return *o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetSystemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemType) {
		return nil, false
	}
	return o.SystemType, true
}

// HasSystemType returns a boolean if a field has been set.
func (o *HostsInstance) HasSystemType() bool {
	if o != nil && !IsNil(o.SystemType) {
		return true
	}

	return false
}

// SetSystemType gets a reference to the given string and assigns it to the SystemType field.
func (o *HostsInstance) SetSystemType(v string) {
	o.SystemType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HostsInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HostsInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HostsInstance) SetDescription(v string) {
	o.Description = &v
}

// GetInitiatorCount returns the InitiatorCount field value if set, zero value otherwise.
func (o *HostsInstance) GetInitiatorCount() int64 {
	if o == nil || IsNil(o.InitiatorCount) {
		var ret int64
		return ret
	}
	return *o.InitiatorCount
}

// GetInitiatorCountOk returns a tuple with the InitiatorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetInitiatorCountOk() (*int64, bool) {
	if o == nil || IsNil(o.InitiatorCount) {
		return nil, false
	}
	return o.InitiatorCount, true
}

// HasInitiatorCount returns a boolean if a field has been set.
func (o *HostsInstance) HasInitiatorCount() bool {
	if o != nil && !IsNil(o.InitiatorCount) {
		return true
	}

	return false
}

// SetInitiatorCount gets a reference to the given int64 and assigns it to the InitiatorCount field.
func (o *HostsInstance) SetInitiatorCount(v int64) {
	o.InitiatorCount = &v
}

// GetInitiatorProtocol returns the InitiatorProtocol field value if set, zero value otherwise.
func (o *HostsInstance) GetInitiatorProtocol() string {
	if o == nil || IsNil(o.InitiatorProtocol) {
		var ret string
		return ret
	}
	return *o.InitiatorProtocol
}

// GetInitiatorProtocolOk returns a tuple with the InitiatorProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetInitiatorProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorProtocol) {
		return nil, false
	}
	return o.InitiatorProtocol, true
}

// HasInitiatorProtocol returns a boolean if a field has been set.
func (o *HostsInstance) HasInitiatorProtocol() bool {
	if o != nil && !IsNil(o.InitiatorProtocol) {
		return true
	}

	return false
}

// SetInitiatorProtocol gets a reference to the given string and assigns it to the InitiatorProtocol field.
func (o *HostsInstance) SetInitiatorProtocol(v string) {
	o.InitiatorProtocol = &v
}

// GetIssueCount returns the IssueCount field value if set, zero value otherwise.
func (o *HostsInstance) GetIssueCount() int64 {
	if o == nil || IsNil(o.IssueCount) {
		var ret int64
		return ret
	}
	return *o.IssueCount
}

// GetIssueCountOk returns a tuple with the IssueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetIssueCountOk() (*int64, bool) {
	if o == nil || IsNil(o.IssueCount) {
		return nil, false
	}
	return o.IssueCount, true
}

// HasIssueCount returns a boolean if a field has been set.
func (o *HostsInstance) HasIssueCount() bool {
	if o != nil && !IsNil(o.IssueCount) {
		return true
	}

	return false
}

// SetIssueCount gets a reference to the given int64 and assigns it to the IssueCount field.
func (o *HostsInstance) SetIssueCount(v int64) {
	o.IssueCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HostsInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HostsInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HostsInstance) SetName(v string) {
	o.Name = &v
}

// GetNativeId returns the NativeId field value if set, zero value otherwise.
func (o *HostsInstance) GetNativeId() string {
	if o == nil || IsNil(o.NativeId) {
		var ret string
		return ret
	}
	return *o.NativeId
}

// GetNativeIdOk returns a tuple with the NativeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetNativeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NativeId) {
		return nil, false
	}
	return o.NativeId, true
}

// HasNativeId returns a boolean if a field has been set.
func (o *HostsInstance) HasNativeId() bool {
	if o != nil && !IsNil(o.NativeId) {
		return true
	}

	return false
}

// SetNativeId gets a reference to the given string and assigns it to the NativeId field.
func (o *HostsInstance) SetNativeId(v string) {
	o.NativeId = &v
}

// GetNetworkAddresses returns the NetworkAddresses field value if set, zero value otherwise.
func (o *HostsInstance) GetNetworkAddresses() string {
	if o == nil || IsNil(o.NetworkAddresses) {
		var ret string
		return ret
	}
	return *o.NetworkAddresses
}

// GetNetworkAddressesOk returns a tuple with the NetworkAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetNetworkAddressesOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkAddresses) {
		return nil, false
	}
	return o.NetworkAddresses, true
}

// HasNetworkAddresses returns a boolean if a field has been set.
func (o *HostsInstance) HasNetworkAddresses() bool {
	if o != nil && !IsNil(o.NetworkAddresses) {
		return true
	}

	return false
}

// SetNetworkAddresses gets a reference to the given string and assigns it to the NetworkAddresses field.
func (o *HostsInstance) SetNetworkAddresses(v string) {
	o.NetworkAddresses = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HostsInstance) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HostsInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HostsInstance) SetType(v string) {
	o.Type = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *HostsInstance) GetOperatingSystem() string {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetOperatingSystemOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *HostsInstance) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *HostsInstance) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetSystemModel returns the SystemModel field value if set, zero value otherwise.
func (o *HostsInstance) GetSystemModel() string {
	if o == nil || IsNil(o.SystemModel) {
		var ret string
		return ret
	}
	return *o.SystemModel
}

// GetSystemModelOk returns a tuple with the SystemModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetSystemModelOk() (*string, bool) {
	if o == nil || IsNil(o.SystemModel) {
		return nil, false
	}
	return o.SystemModel, true
}

// HasSystemModel returns a boolean if a field has been set.
func (o *HostsInstance) HasSystemModel() bool {
	if o != nil && !IsNil(o.SystemModel) {
		return true
	}

	return false
}

// SetSystemModel gets a reference to the given string and assigns it to the SystemModel field.
func (o *HostsInstance) SetSystemModel(v string) {
	o.SystemModel = &v
}

// GetSystemName returns the SystemName field value if set, zero value otherwise.
func (o *HostsInstance) GetSystemName() string {
	if o == nil || IsNil(o.SystemName) {
		var ret string
		return ret
	}
	return *o.SystemName
}

// GetSystemNameOk returns a tuple with the SystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetSystemNameOk() (*string, bool) {
	if o == nil || IsNil(o.SystemName) {
		return nil, false
	}
	return o.SystemName, true
}

// HasSystemName returns a boolean if a field has been set.
func (o *HostsInstance) HasSystemName() bool {
	if o != nil && !IsNil(o.SystemName) {
		return true
	}

	return false
}

// SetSystemName gets a reference to the given string and assigns it to the SystemName field.
func (o *HostsInstance) SetSystemName(v string) {
	o.SystemName = &v
}

// GetTotalSize returns the TotalSize field value if set, zero value otherwise.
func (o *HostsInstance) GetTotalSize() int64 {
	if o == nil || IsNil(o.TotalSize) {
		var ret int64
		return ret
	}
	return *o.TotalSize
}

// GetTotalSizeOk returns a tuple with the TotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostsInstance) GetTotalSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalSize) {
		return nil, false
	}
	return o.TotalSize, true
}

// HasTotalSize returns a boolean if a field has been set.
func (o *HostsInstance) HasTotalSize() bool {
	if o != nil && !IsNil(o.TotalSize) {
		return true
	}

	return false
}

// SetTotalSize gets a reference to the given int64 and assigns it to the TotalSize field.
func (o *HostsInstance) SetTotalSize(v int64) {
	o.TotalSize = &v
}

func (o HostsInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostsInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.SystemId) {
		toSerialize["system_id"] = o.SystemId
	}
	if !IsNil(o.SystemType) {
		toSerialize["system_type"] = o.SystemType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InitiatorCount) {
		toSerialize["initiator_count"] = o.InitiatorCount
	}
	if !IsNil(o.InitiatorProtocol) {
		toSerialize["initiator_protocol"] = o.InitiatorProtocol
	}
	if !IsNil(o.IssueCount) {
		toSerialize["issue_count"] = o.IssueCount
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NativeId) {
		toSerialize["native_id"] = o.NativeId
	}
	if !IsNil(o.NetworkAddresses) {
		toSerialize["network_addresses"] = o.NetworkAddresses
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	if !IsNil(o.SystemModel) {
		toSerialize["system_model"] = o.SystemModel
	}
	if !IsNil(o.SystemName) {
		toSerialize["system_name"] = o.SystemName
	}
	if !IsNil(o.TotalSize) {
		toSerialize["total_size"] = o.TotalSize
	}
	return toSerialize, nil
}

func (o *HostsInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostsInstance := _HostsInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostsInstance)

	if err != nil {
		return err
	}

	*o = HostsInstance(varHostsInstance)

	return err
}

type NullableHostsInstance struct {
	value *HostsInstance
	isSet bool
}

func (v NullableHostsInstance) Get() *HostsInstance {
	return v.value
}

func (v *NullableHostsInstance) Set(val *HostsInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableHostsInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableHostsInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostsInstance(val *HostsInstance) *NullableHostsInstance {
	return &NullableHostsInstance{value: val, isSet: true}
}

func (v NullableHostsInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostsInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


