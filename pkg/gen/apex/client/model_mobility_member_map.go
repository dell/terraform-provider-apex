/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MobilityMemberMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobilityMemberMap{}

// MobilityMemberMap A mobility member map is a mapping of a mobility member and it's related member.  For example a target volume with a reference to the source volume.  Or a clone volume and its related target volume.
type MobilityMemberMap struct {
	// ID of the member
	Id string `json:"id"`
	// Identifier of the related mobility member
	ParentId string `json:"parent_id"`
	// Name of the member
	Name string `json:"name"`
	// Size of the member
	Size string `json:"size"`
}

type _MobilityMemberMap MobilityMemberMap

// NewMobilityMemberMap instantiates a new MobilityMemberMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobilityMemberMap(id string, parentId string, name string, size string) *MobilityMemberMap {
	this := MobilityMemberMap{}
	this.Id = id
	this.ParentId = parentId
	this.Name = name
	this.Size = size
	return &this
}

// NewMobilityMemberMapWithDefaults instantiates a new MobilityMemberMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobilityMemberMapWithDefaults() *MobilityMemberMap {
	this := MobilityMemberMap{}
	return &this
}

// GetId returns the Id field value
func (o *MobilityMemberMap) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MobilityMemberMap) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MobilityMemberMap) SetId(v string) {
	o.Id = v
}

// GetParentId returns the ParentId field value
func (o *MobilityMemberMap) GetParentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *MobilityMemberMap) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *MobilityMemberMap) SetParentId(v string) {
	o.ParentId = v
}

// GetName returns the Name field value
func (o *MobilityMemberMap) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MobilityMemberMap) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MobilityMemberMap) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *MobilityMemberMap) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *MobilityMemberMap) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *MobilityMemberMap) SetSize(v string) {
	o.Size = v
}

func (o MobilityMemberMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobilityMemberMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["parent_id"] = o.ParentId
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

func (o *MobilityMemberMap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"parent_id",
		"name",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMobilityMemberMap := _MobilityMemberMap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMobilityMemberMap)

	if err != nil {
		return err
	}

	*o = MobilityMemberMap(varMobilityMemberMap)

	return err
}

type NullableMobilityMemberMap struct {
	value *MobilityMemberMap
	isSet bool
}

func (v NullableMobilityMemberMap) Get() *MobilityMemberMap {
	return v.value
}

func (v *NullableMobilityMemberMap) Set(val *MobilityMemberMap) {
	v.value = val
	v.isSet = true
}

func (v NullableMobilityMemberMap) IsSet() bool {
	return v.isSet
}

func (v *NullableMobilityMemberMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobilityMemberMap(val *MobilityMemberMap) *NullableMobilityMemberMap {
	return &NullableMobilityMemberMap{value: val, isSet: true}
}

func (v NullableMobilityMemberMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobilityMemberMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


