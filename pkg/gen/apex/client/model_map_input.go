/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MapInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapInput{}

// MapInput MapInput
type MapInput struct {
	// list of hosts to be mapped
	HostMappings []string `json:"host_mappings"`
}

type _MapInput MapInput

// NewMapInput instantiates a new MapInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapInput(hostMappings []string) *MapInput {
	this := MapInput{}
	this.HostMappings = hostMappings
	return &this
}

// NewMapInputWithDefaults instantiates a new MapInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapInputWithDefaults() *MapInput {
	this := MapInput{}
	return &this
}

// GetHostMappings returns the HostMappings field value
func (o *MapInput) GetHostMappings() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HostMappings
}

// GetHostMappingsOk returns a tuple with the HostMappings field value
// and a boolean to check if the value has been set.
func (o *MapInput) GetHostMappingsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostMappings, true
}

// SetHostMappings sets field value
func (o *MapInput) SetHostMappings(v []string) {
	o.HostMappings = v
}

func (o MapInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_mappings"] = o.HostMappings
	return toSerialize, nil
}

func (o *MapInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_mappings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapInput := _MapInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMapInput)

	if err != nil {
		return err
	}

	*o = MapInput(varMapInput)

	return err
}

type NullableMapInput struct {
	value *MapInput
	isSet bool
}

func (v NullableMapInput) Get() *MapInput {
	return v.value
}

func (v *NullableMapInput) Set(val *MapInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMapInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMapInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapInput(val *MapInput) *NullableMapInput {
	return &NullableMapInput{value: val, isSet: true}
}

func (v NullableMapInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


