/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteCloneInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteCloneInput{}

// DeleteCloneInput Delete a clone input
type DeleteCloneInput struct {
	// If true remove the clone from the system if false the clone will remain on the system but will be removed from APEX management.
	RemoveFromSystem bool `json:"remove_from_system"`
}

type _DeleteCloneInput DeleteCloneInput

// NewDeleteCloneInput instantiates a new DeleteCloneInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteCloneInput(removeFromSystem bool) *DeleteCloneInput {
	this := DeleteCloneInput{}
	this.RemoveFromSystem = removeFromSystem
	return &this
}

// NewDeleteCloneInputWithDefaults instantiates a new DeleteCloneInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteCloneInputWithDefaults() *DeleteCloneInput {
	this := DeleteCloneInput{}
	return &this
}

// GetRemoveFromSystem returns the RemoveFromSystem field value
func (o *DeleteCloneInput) GetRemoveFromSystem() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RemoveFromSystem
}

// GetRemoveFromSystemOk returns a tuple with the RemoveFromSystem field value
// and a boolean to check if the value has been set.
func (o *DeleteCloneInput) GetRemoveFromSystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoveFromSystem, true
}

// SetRemoveFromSystem sets field value
func (o *DeleteCloneInput) SetRemoveFromSystem(v bool) {
	o.RemoveFromSystem = v
}

func (o DeleteCloneInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteCloneInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remove_from_system"] = o.RemoveFromSystem
	return toSerialize, nil
}

func (o *DeleteCloneInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remove_from_system",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteCloneInput := _DeleteCloneInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteCloneInput)

	if err != nil {
		return err
	}

	*o = DeleteCloneInput(varDeleteCloneInput)

	return err
}

type NullableDeleteCloneInput struct {
	value *DeleteCloneInput
	isSet bool
}

func (v NullableDeleteCloneInput) Get() *DeleteCloneInput {
	return v.value
}

func (v *NullableDeleteCloneInput) Set(val *DeleteCloneInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteCloneInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteCloneInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteCloneInput(val *DeleteCloneInput) *NullableDeleteCloneInput {
	return &NullableDeleteCloneInput{value: val, isSet: true}
}

func (v NullableDeleteCloneInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteCloneInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


