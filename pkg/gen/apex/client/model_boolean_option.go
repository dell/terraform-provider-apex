/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BooleanOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BooleanOption{}

// BooleanOption Model for providing boolean input
type BooleanOption struct {
	// Display name of the option
	Name string `json:"name"`
	// Description for the option
	Description *string `json:"description,omitempty"`
	// User input value for the option
	DefaultValue *bool `json:"default_value,omitempty"`
	// Is it mandatory
	IsConfigurable bool `json:"is_configurable"`
	Type string `json:"type"`
}

type _BooleanOption BooleanOption

// NewBooleanOption instantiates a new BooleanOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBooleanOption(name string, isConfigurable bool, type_ string) *BooleanOption {
	this := BooleanOption{}
	this.Name = name
	this.IsConfigurable = isConfigurable
	this.Type = type_
	return &this
}

// NewBooleanOptionWithDefaults instantiates a new BooleanOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBooleanOptionWithDefaults() *BooleanOption {
	this := BooleanOption{}
	var type_ string = "BOOLEAN"
	this.Type = type_
	return &this
}

// GetName returns the Name field value
func (o *BooleanOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BooleanOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BooleanOption) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BooleanOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BooleanOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BooleanOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BooleanOption) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *BooleanOption) GetDefaultValue() bool {
	if o == nil || IsNil(o.DefaultValue) {
		var ret bool
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BooleanOption) GetDefaultValueOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *BooleanOption) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given bool and assigns it to the DefaultValue field.
func (o *BooleanOption) SetDefaultValue(v bool) {
	o.DefaultValue = &v
}

// GetIsConfigurable returns the IsConfigurable field value
func (o *BooleanOption) GetIsConfigurable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsConfigurable
}

// GetIsConfigurableOk returns a tuple with the IsConfigurable field value
// and a boolean to check if the value has been set.
func (o *BooleanOption) GetIsConfigurableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsConfigurable, true
}

// SetIsConfigurable sets field value
func (o *BooleanOption) SetIsConfigurable(v bool) {
	o.IsConfigurable = v
}

// GetType returns the Type field value
func (o *BooleanOption) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BooleanOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BooleanOption) SetType(v string) {
	o.Type = v
}

func (o BooleanOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BooleanOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["default_value"] = o.DefaultValue
	}
	toSerialize["is_configurable"] = o.IsConfigurable
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *BooleanOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"is_configurable",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBooleanOption := _BooleanOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBooleanOption)

	if err != nil {
		return err
	}

	*o = BooleanOption(varBooleanOption)

	return err
}

type NullableBooleanOption struct {
	value *BooleanOption
	isSet bool
}

func (v NullableBooleanOption) Get() *BooleanOption {
	return v.value
}

func (v *NullableBooleanOption) Set(val *BooleanOption) {
	v.value = val
	v.isSet = true
}

func (v NullableBooleanOption) IsSet() bool {
	return v.isSet
}

func (v *NullableBooleanOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBooleanOption(val *BooleanOption) *NullableBooleanOption {
	return &NullableBooleanOption{value: val, isSet: true}
}

func (v NullableBooleanOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBooleanOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


