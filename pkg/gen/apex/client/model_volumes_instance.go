/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumesInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumesInstance{}

// VolumesInstance The volume object.
type VolumesInstance struct {
	// Identifier of the volume.
	Id string `json:"id"`
	// Unique identifier for the device or appliance.
	SystemId *string `json:"system_id,omitempty"`
	// Type of the system for the volume.
	SystemType *string `json:"system_type,omitempty"`
	// The allocated size of the volume - Unit: bytes
	AllocatedSize *int64 `json:"allocated_size,omitempty"`
	// The bandwidth consumed by the volume. Aggregated for a rolling average over the last 24 hours - Unit: bytes/s
	Bandwidth *int64 `json:"bandwidth,omitempty"`
	// Consistency group name of the volume.
	ConsistencyGroupName *string `json:"consistency_group_name,omitempty"`
	// The data reduction percent for the volume.
	DataReductionPercent *float64 `json:"data_reduction_percent,omitempty"`
	// The data reduction ratio for the volume.
	DataReductionRatio *float64 `json:"data_reduction_ratio,omitempty"`
	// The data reduction capacity saved for the volume - Unit: bytes
	DataReductionSavedSize *int64 `json:"data_reduction_saved_size,omitempty"`
	// The IO limit policy name for the volume.
	IoLimitPolicyName *string `json:"io_limit_policy_name,omitempty"`
	// The IOPS for the volume. Aggregated for a rolling average over the last 24 hours - Unit: IO/s
	Iops *int64 `json:"iops,omitempty"`
	// Identifies whether the volume is compressed or deduplicated.
	IsCompressedOrDeduped *string `json:"is_compressed_or_deduped,omitempty"`
	// Identifies whether the volume has thin provisioning enabled.
	IsThinEnabled *bool `json:"is_thin_enabled,omitempty"`
	// Number of health issues that are present on the volume.
	IssueCount *int64 `json:"issue_count,omitempty"`
	// The latency for the volume. Aggregated for a rolling average over the last 24 hours - Unit: microseconds
	Latency *int64 `json:"latency,omitempty"`
	// The logical size for the volume - Unit: bytes
	LogicalSize *int64 `json:"logical_size,omitempty"`
	// The name of the volume.
	Name *string `json:"name,omitempty"`
	// Identifier of the volume, defined by the system.
	NativeId *string `json:"native_id,omitempty"`
	// Type of the volume, which is either LUN or VOLUME.
	Type *string `json:"type,omitempty"`
	// The pool identifier for the volume.
	PoolId *string `json:"pool_id,omitempty"`
	// The pool name for the volume.
	PoolName *string `json:"pool_name,omitempty"`
	// Type of the pool.
	PoolType *string `json:"pool_type,omitempty"`
	// The snapshot count for the volume.
	SnapshotCount *int64 `json:"snapshot_count,omitempty"`
	// The snapshot policy for the volume.
	SnapshotPolicy *string `json:"snapshot_policy,omitempty"`
	// The snapshot size for the volume - Unit: bytes
	SnapshotSize *int64 `json:"snapshot_size,omitempty"`
	// The storage resource identifier for the volume.
	StorageResourceId *string `json:"storage_resource_id,omitempty"`
	// The storage resource native identifier for the volume.
	StorageResourceNativeId *string `json:"storage_resource_native_id,omitempty"`
	// The model of the system.
	SystemModel *string `json:"system_model,omitempty"`
	// Name of the system for the volume.
	SystemName *string `json:"system_name,omitempty"`
	// The total provisioned size of the volume - Unit: bytes
	TotalSize *int64 `json:"total_size,omitempty"`
	// The used size of the volume - Unit: bytes
	UsedSize *int64 `json:"used_size,omitempty"`
	// The unique used size of the volume - Unit: bytes
	UsedSizeUnique *int64 `json:"used_size_unique,omitempty"`
}

type _VolumesInstance VolumesInstance

// NewVolumesInstance instantiates a new VolumesInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumesInstance(id string) *VolumesInstance {
	this := VolumesInstance{}
	this.Id = id
	return &this
}

// NewVolumesInstanceWithDefaults instantiates a new VolumesInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumesInstanceWithDefaults() *VolumesInstance {
	this := VolumesInstance{}
	return &this
}

// GetId returns the Id field value
func (o *VolumesInstance) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumesInstance) SetId(v string) {
	o.Id = v
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *VolumesInstance) GetSystemId() string {
	if o == nil || IsNil(o.SystemId) {
		var ret string
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *VolumesInstance) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given string and assigns it to the SystemId field.
func (o *VolumesInstance) SetSystemId(v string) {
	o.SystemId = &v
}

// GetSystemType returns the SystemType field value if set, zero value otherwise.
func (o *VolumesInstance) GetSystemType() string {
	if o == nil || IsNil(o.SystemType) {
		var ret string
		return ret
	}
	return *o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetSystemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SystemType) {
		return nil, false
	}
	return o.SystemType, true
}

// HasSystemType returns a boolean if a field has been set.
func (o *VolumesInstance) HasSystemType() bool {
	if o != nil && !IsNil(o.SystemType) {
		return true
	}

	return false
}

// SetSystemType gets a reference to the given string and assigns it to the SystemType field.
func (o *VolumesInstance) SetSystemType(v string) {
	o.SystemType = &v
}

// GetAllocatedSize returns the AllocatedSize field value if set, zero value otherwise.
func (o *VolumesInstance) GetAllocatedSize() int64 {
	if o == nil || IsNil(o.AllocatedSize) {
		var ret int64
		return ret
	}
	return *o.AllocatedSize
}

// GetAllocatedSizeOk returns a tuple with the AllocatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetAllocatedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedSize) {
		return nil, false
	}
	return o.AllocatedSize, true
}

// HasAllocatedSize returns a boolean if a field has been set.
func (o *VolumesInstance) HasAllocatedSize() bool {
	if o != nil && !IsNil(o.AllocatedSize) {
		return true
	}

	return false
}

// SetAllocatedSize gets a reference to the given int64 and assigns it to the AllocatedSize field.
func (o *VolumesInstance) SetAllocatedSize(v int64) {
	o.AllocatedSize = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *VolumesInstance) GetBandwidth() int64 {
	if o == nil || IsNil(o.Bandwidth) {
		var ret int64
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetBandwidthOk() (*int64, bool) {
	if o == nil || IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *VolumesInstance) HasBandwidth() bool {
	if o != nil && !IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int64 and assigns it to the Bandwidth field.
func (o *VolumesInstance) SetBandwidth(v int64) {
	o.Bandwidth = &v
}

// GetConsistencyGroupName returns the ConsistencyGroupName field value if set, zero value otherwise.
func (o *VolumesInstance) GetConsistencyGroupName() string {
	if o == nil || IsNil(o.ConsistencyGroupName) {
		var ret string
		return ret
	}
	return *o.ConsistencyGroupName
}

// GetConsistencyGroupNameOk returns a tuple with the ConsistencyGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetConsistencyGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConsistencyGroupName) {
		return nil, false
	}
	return o.ConsistencyGroupName, true
}

// HasConsistencyGroupName returns a boolean if a field has been set.
func (o *VolumesInstance) HasConsistencyGroupName() bool {
	if o != nil && !IsNil(o.ConsistencyGroupName) {
		return true
	}

	return false
}

// SetConsistencyGroupName gets a reference to the given string and assigns it to the ConsistencyGroupName field.
func (o *VolumesInstance) SetConsistencyGroupName(v string) {
	o.ConsistencyGroupName = &v
}

// GetDataReductionPercent returns the DataReductionPercent field value if set, zero value otherwise.
func (o *VolumesInstance) GetDataReductionPercent() float64 {
	if o == nil || IsNil(o.DataReductionPercent) {
		var ret float64
		return ret
	}
	return *o.DataReductionPercent
}

// GetDataReductionPercentOk returns a tuple with the DataReductionPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetDataReductionPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.DataReductionPercent) {
		return nil, false
	}
	return o.DataReductionPercent, true
}

// HasDataReductionPercent returns a boolean if a field has been set.
func (o *VolumesInstance) HasDataReductionPercent() bool {
	if o != nil && !IsNil(o.DataReductionPercent) {
		return true
	}

	return false
}

// SetDataReductionPercent gets a reference to the given float64 and assigns it to the DataReductionPercent field.
func (o *VolumesInstance) SetDataReductionPercent(v float64) {
	o.DataReductionPercent = &v
}

// GetDataReductionRatio returns the DataReductionRatio field value if set, zero value otherwise.
func (o *VolumesInstance) GetDataReductionRatio() float64 {
	if o == nil || IsNil(o.DataReductionRatio) {
		var ret float64
		return ret
	}
	return *o.DataReductionRatio
}

// GetDataReductionRatioOk returns a tuple with the DataReductionRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetDataReductionRatioOk() (*float64, bool) {
	if o == nil || IsNil(o.DataReductionRatio) {
		return nil, false
	}
	return o.DataReductionRatio, true
}

// HasDataReductionRatio returns a boolean if a field has been set.
func (o *VolumesInstance) HasDataReductionRatio() bool {
	if o != nil && !IsNil(o.DataReductionRatio) {
		return true
	}

	return false
}

// SetDataReductionRatio gets a reference to the given float64 and assigns it to the DataReductionRatio field.
func (o *VolumesInstance) SetDataReductionRatio(v float64) {
	o.DataReductionRatio = &v
}

// GetDataReductionSavedSize returns the DataReductionSavedSize field value if set, zero value otherwise.
func (o *VolumesInstance) GetDataReductionSavedSize() int64 {
	if o == nil || IsNil(o.DataReductionSavedSize) {
		var ret int64
		return ret
	}
	return *o.DataReductionSavedSize
}

// GetDataReductionSavedSizeOk returns a tuple with the DataReductionSavedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetDataReductionSavedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.DataReductionSavedSize) {
		return nil, false
	}
	return o.DataReductionSavedSize, true
}

// HasDataReductionSavedSize returns a boolean if a field has been set.
func (o *VolumesInstance) HasDataReductionSavedSize() bool {
	if o != nil && !IsNil(o.DataReductionSavedSize) {
		return true
	}

	return false
}

// SetDataReductionSavedSize gets a reference to the given int64 and assigns it to the DataReductionSavedSize field.
func (o *VolumesInstance) SetDataReductionSavedSize(v int64) {
	o.DataReductionSavedSize = &v
}

// GetIoLimitPolicyName returns the IoLimitPolicyName field value if set, zero value otherwise.
func (o *VolumesInstance) GetIoLimitPolicyName() string {
	if o == nil || IsNil(o.IoLimitPolicyName) {
		var ret string
		return ret
	}
	return *o.IoLimitPolicyName
}

// GetIoLimitPolicyNameOk returns a tuple with the IoLimitPolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetIoLimitPolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.IoLimitPolicyName) {
		return nil, false
	}
	return o.IoLimitPolicyName, true
}

// HasIoLimitPolicyName returns a boolean if a field has been set.
func (o *VolumesInstance) HasIoLimitPolicyName() bool {
	if o != nil && !IsNil(o.IoLimitPolicyName) {
		return true
	}

	return false
}

// SetIoLimitPolicyName gets a reference to the given string and assigns it to the IoLimitPolicyName field.
func (o *VolumesInstance) SetIoLimitPolicyName(v string) {
	o.IoLimitPolicyName = &v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *VolumesInstance) GetIops() int64 {
	if o == nil || IsNil(o.Iops) {
		var ret int64
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetIopsOk() (*int64, bool) {
	if o == nil || IsNil(o.Iops) {
		return nil, false
	}
	return o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *VolumesInstance) HasIops() bool {
	if o != nil && !IsNil(o.Iops) {
		return true
	}

	return false
}

// SetIops gets a reference to the given int64 and assigns it to the Iops field.
func (o *VolumesInstance) SetIops(v int64) {
	o.Iops = &v
}

// GetIsCompressedOrDeduped returns the IsCompressedOrDeduped field value if set, zero value otherwise.
func (o *VolumesInstance) GetIsCompressedOrDeduped() string {
	if o == nil || IsNil(o.IsCompressedOrDeduped) {
		var ret string
		return ret
	}
	return *o.IsCompressedOrDeduped
}

// GetIsCompressedOrDedupedOk returns a tuple with the IsCompressedOrDeduped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetIsCompressedOrDedupedOk() (*string, bool) {
	if o == nil || IsNil(o.IsCompressedOrDeduped) {
		return nil, false
	}
	return o.IsCompressedOrDeduped, true
}

// HasIsCompressedOrDeduped returns a boolean if a field has been set.
func (o *VolumesInstance) HasIsCompressedOrDeduped() bool {
	if o != nil && !IsNil(o.IsCompressedOrDeduped) {
		return true
	}

	return false
}

// SetIsCompressedOrDeduped gets a reference to the given string and assigns it to the IsCompressedOrDeduped field.
func (o *VolumesInstance) SetIsCompressedOrDeduped(v string) {
	o.IsCompressedOrDeduped = &v
}

// GetIsThinEnabled returns the IsThinEnabled field value if set, zero value otherwise.
func (o *VolumesInstance) GetIsThinEnabled() bool {
	if o == nil || IsNil(o.IsThinEnabled) {
		var ret bool
		return ret
	}
	return *o.IsThinEnabled
}

// GetIsThinEnabledOk returns a tuple with the IsThinEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetIsThinEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsThinEnabled) {
		return nil, false
	}
	return o.IsThinEnabled, true
}

// HasIsThinEnabled returns a boolean if a field has been set.
func (o *VolumesInstance) HasIsThinEnabled() bool {
	if o != nil && !IsNil(o.IsThinEnabled) {
		return true
	}

	return false
}

// SetIsThinEnabled gets a reference to the given bool and assigns it to the IsThinEnabled field.
func (o *VolumesInstance) SetIsThinEnabled(v bool) {
	o.IsThinEnabled = &v
}

// GetIssueCount returns the IssueCount field value if set, zero value otherwise.
func (o *VolumesInstance) GetIssueCount() int64 {
	if o == nil || IsNil(o.IssueCount) {
		var ret int64
		return ret
	}
	return *o.IssueCount
}

// GetIssueCountOk returns a tuple with the IssueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetIssueCountOk() (*int64, bool) {
	if o == nil || IsNil(o.IssueCount) {
		return nil, false
	}
	return o.IssueCount, true
}

// HasIssueCount returns a boolean if a field has been set.
func (o *VolumesInstance) HasIssueCount() bool {
	if o != nil && !IsNil(o.IssueCount) {
		return true
	}

	return false
}

// SetIssueCount gets a reference to the given int64 and assigns it to the IssueCount field.
func (o *VolumesInstance) SetIssueCount(v int64) {
	o.IssueCount = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *VolumesInstance) GetLatency() int64 {
	if o == nil || IsNil(o.Latency) {
		var ret int64
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetLatencyOk() (*int64, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *VolumesInstance) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given int64 and assigns it to the Latency field.
func (o *VolumesInstance) SetLatency(v int64) {
	o.Latency = &v
}

// GetLogicalSize returns the LogicalSize field value if set, zero value otherwise.
func (o *VolumesInstance) GetLogicalSize() int64 {
	if o == nil || IsNil(o.LogicalSize) {
		var ret int64
		return ret
	}
	return *o.LogicalSize
}

// GetLogicalSizeOk returns a tuple with the LogicalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetLogicalSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.LogicalSize) {
		return nil, false
	}
	return o.LogicalSize, true
}

// HasLogicalSize returns a boolean if a field has been set.
func (o *VolumesInstance) HasLogicalSize() bool {
	if o != nil && !IsNil(o.LogicalSize) {
		return true
	}

	return false
}

// SetLogicalSize gets a reference to the given int64 and assigns it to the LogicalSize field.
func (o *VolumesInstance) SetLogicalSize(v int64) {
	o.LogicalSize = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VolumesInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VolumesInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VolumesInstance) SetName(v string) {
	o.Name = &v
}

// GetNativeId returns the NativeId field value if set, zero value otherwise.
func (o *VolumesInstance) GetNativeId() string {
	if o == nil || IsNil(o.NativeId) {
		var ret string
		return ret
	}
	return *o.NativeId
}

// GetNativeIdOk returns a tuple with the NativeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetNativeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NativeId) {
		return nil, false
	}
	return o.NativeId, true
}

// HasNativeId returns a boolean if a field has been set.
func (o *VolumesInstance) HasNativeId() bool {
	if o != nil && !IsNil(o.NativeId) {
		return true
	}

	return false
}

// SetNativeId gets a reference to the given string and assigns it to the NativeId field.
func (o *VolumesInstance) SetNativeId(v string) {
	o.NativeId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VolumesInstance) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VolumesInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VolumesInstance) SetType(v string) {
	o.Type = &v
}

// GetPoolId returns the PoolId field value if set, zero value otherwise.
func (o *VolumesInstance) GetPoolId() string {
	if o == nil || IsNil(o.PoolId) {
		var ret string
		return ret
	}
	return *o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetPoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.PoolId) {
		return nil, false
	}
	return o.PoolId, true
}

// HasPoolId returns a boolean if a field has been set.
func (o *VolumesInstance) HasPoolId() bool {
	if o != nil && !IsNil(o.PoolId) {
		return true
	}

	return false
}

// SetPoolId gets a reference to the given string and assigns it to the PoolId field.
func (o *VolumesInstance) SetPoolId(v string) {
	o.PoolId = &v
}

// GetPoolName returns the PoolName field value if set, zero value otherwise.
func (o *VolumesInstance) GetPoolName() string {
	if o == nil || IsNil(o.PoolName) {
		var ret string
		return ret
	}
	return *o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetPoolNameOk() (*string, bool) {
	if o == nil || IsNil(o.PoolName) {
		return nil, false
	}
	return o.PoolName, true
}

// HasPoolName returns a boolean if a field has been set.
func (o *VolumesInstance) HasPoolName() bool {
	if o != nil && !IsNil(o.PoolName) {
		return true
	}

	return false
}

// SetPoolName gets a reference to the given string and assigns it to the PoolName field.
func (o *VolumesInstance) SetPoolName(v string) {
	o.PoolName = &v
}

// GetPoolType returns the PoolType field value if set, zero value otherwise.
func (o *VolumesInstance) GetPoolType() string {
	if o == nil || IsNil(o.PoolType) {
		var ret string
		return ret
	}
	return *o.PoolType
}

// GetPoolTypeOk returns a tuple with the PoolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetPoolTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PoolType) {
		return nil, false
	}
	return o.PoolType, true
}

// HasPoolType returns a boolean if a field has been set.
func (o *VolumesInstance) HasPoolType() bool {
	if o != nil && !IsNil(o.PoolType) {
		return true
	}

	return false
}

// SetPoolType gets a reference to the given string and assigns it to the PoolType field.
func (o *VolumesInstance) SetPoolType(v string) {
	o.PoolType = &v
}

// GetSnapshotCount returns the SnapshotCount field value if set, zero value otherwise.
func (o *VolumesInstance) GetSnapshotCount() int64 {
	if o == nil || IsNil(o.SnapshotCount) {
		var ret int64
		return ret
	}
	return *o.SnapshotCount
}

// GetSnapshotCountOk returns a tuple with the SnapshotCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetSnapshotCountOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapshotCount) {
		return nil, false
	}
	return o.SnapshotCount, true
}

// HasSnapshotCount returns a boolean if a field has been set.
func (o *VolumesInstance) HasSnapshotCount() bool {
	if o != nil && !IsNil(o.SnapshotCount) {
		return true
	}

	return false
}

// SetSnapshotCount gets a reference to the given int64 and assigns it to the SnapshotCount field.
func (o *VolumesInstance) SetSnapshotCount(v int64) {
	o.SnapshotCount = &v
}

// GetSnapshotPolicy returns the SnapshotPolicy field value if set, zero value otherwise.
func (o *VolumesInstance) GetSnapshotPolicy() string {
	if o == nil || IsNil(o.SnapshotPolicy) {
		var ret string
		return ret
	}
	return *o.SnapshotPolicy
}

// GetSnapshotPolicyOk returns a tuple with the SnapshotPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetSnapshotPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotPolicy) {
		return nil, false
	}
	return o.SnapshotPolicy, true
}

// HasSnapshotPolicy returns a boolean if a field has been set.
func (o *VolumesInstance) HasSnapshotPolicy() bool {
	if o != nil && !IsNil(o.SnapshotPolicy) {
		return true
	}

	return false
}

// SetSnapshotPolicy gets a reference to the given string and assigns it to the SnapshotPolicy field.
func (o *VolumesInstance) SetSnapshotPolicy(v string) {
	o.SnapshotPolicy = &v
}

// GetSnapshotSize returns the SnapshotSize field value if set, zero value otherwise.
func (o *VolumesInstance) GetSnapshotSize() int64 {
	if o == nil || IsNil(o.SnapshotSize) {
		var ret int64
		return ret
	}
	return *o.SnapshotSize
}

// GetSnapshotSizeOk returns a tuple with the SnapshotSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetSnapshotSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapshotSize) {
		return nil, false
	}
	return o.SnapshotSize, true
}

// HasSnapshotSize returns a boolean if a field has been set.
func (o *VolumesInstance) HasSnapshotSize() bool {
	if o != nil && !IsNil(o.SnapshotSize) {
		return true
	}

	return false
}

// SetSnapshotSize gets a reference to the given int64 and assigns it to the SnapshotSize field.
func (o *VolumesInstance) SetSnapshotSize(v int64) {
	o.SnapshotSize = &v
}

// GetStorageResourceId returns the StorageResourceId field value if set, zero value otherwise.
func (o *VolumesInstance) GetStorageResourceId() string {
	if o == nil || IsNil(o.StorageResourceId) {
		var ret string
		return ret
	}
	return *o.StorageResourceId
}

// GetStorageResourceIdOk returns a tuple with the StorageResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetStorageResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.StorageResourceId) {
		return nil, false
	}
	return o.StorageResourceId, true
}

// HasStorageResourceId returns a boolean if a field has been set.
func (o *VolumesInstance) HasStorageResourceId() bool {
	if o != nil && !IsNil(o.StorageResourceId) {
		return true
	}

	return false
}

// SetStorageResourceId gets a reference to the given string and assigns it to the StorageResourceId field.
func (o *VolumesInstance) SetStorageResourceId(v string) {
	o.StorageResourceId = &v
}

// GetStorageResourceNativeId returns the StorageResourceNativeId field value if set, zero value otherwise.
func (o *VolumesInstance) GetStorageResourceNativeId() string {
	if o == nil || IsNil(o.StorageResourceNativeId) {
		var ret string
		return ret
	}
	return *o.StorageResourceNativeId
}

// GetStorageResourceNativeIdOk returns a tuple with the StorageResourceNativeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetStorageResourceNativeIdOk() (*string, bool) {
	if o == nil || IsNil(o.StorageResourceNativeId) {
		return nil, false
	}
	return o.StorageResourceNativeId, true
}

// HasStorageResourceNativeId returns a boolean if a field has been set.
func (o *VolumesInstance) HasStorageResourceNativeId() bool {
	if o != nil && !IsNil(o.StorageResourceNativeId) {
		return true
	}

	return false
}

// SetStorageResourceNativeId gets a reference to the given string and assigns it to the StorageResourceNativeId field.
func (o *VolumesInstance) SetStorageResourceNativeId(v string) {
	o.StorageResourceNativeId = &v
}

// GetSystemModel returns the SystemModel field value if set, zero value otherwise.
func (o *VolumesInstance) GetSystemModel() string {
	if o == nil || IsNil(o.SystemModel) {
		var ret string
		return ret
	}
	return *o.SystemModel
}

// GetSystemModelOk returns a tuple with the SystemModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetSystemModelOk() (*string, bool) {
	if o == nil || IsNil(o.SystemModel) {
		return nil, false
	}
	return o.SystemModel, true
}

// HasSystemModel returns a boolean if a field has been set.
func (o *VolumesInstance) HasSystemModel() bool {
	if o != nil && !IsNil(o.SystemModel) {
		return true
	}

	return false
}

// SetSystemModel gets a reference to the given string and assigns it to the SystemModel field.
func (o *VolumesInstance) SetSystemModel(v string) {
	o.SystemModel = &v
}

// GetSystemName returns the SystemName field value if set, zero value otherwise.
func (o *VolumesInstance) GetSystemName() string {
	if o == nil || IsNil(o.SystemName) {
		var ret string
		return ret
	}
	return *o.SystemName
}

// GetSystemNameOk returns a tuple with the SystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetSystemNameOk() (*string, bool) {
	if o == nil || IsNil(o.SystemName) {
		return nil, false
	}
	return o.SystemName, true
}

// HasSystemName returns a boolean if a field has been set.
func (o *VolumesInstance) HasSystemName() bool {
	if o != nil && !IsNil(o.SystemName) {
		return true
	}

	return false
}

// SetSystemName gets a reference to the given string and assigns it to the SystemName field.
func (o *VolumesInstance) SetSystemName(v string) {
	o.SystemName = &v
}

// GetTotalSize returns the TotalSize field value if set, zero value otherwise.
func (o *VolumesInstance) GetTotalSize() int64 {
	if o == nil || IsNil(o.TotalSize) {
		var ret int64
		return ret
	}
	return *o.TotalSize
}

// GetTotalSizeOk returns a tuple with the TotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetTotalSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalSize) {
		return nil, false
	}
	return o.TotalSize, true
}

// HasTotalSize returns a boolean if a field has been set.
func (o *VolumesInstance) HasTotalSize() bool {
	if o != nil && !IsNil(o.TotalSize) {
		return true
	}

	return false
}

// SetTotalSize gets a reference to the given int64 and assigns it to the TotalSize field.
func (o *VolumesInstance) SetTotalSize(v int64) {
	o.TotalSize = &v
}

// GetUsedSize returns the UsedSize field value if set, zero value otherwise.
func (o *VolumesInstance) GetUsedSize() int64 {
	if o == nil || IsNil(o.UsedSize) {
		var ret int64
		return ret
	}
	return *o.UsedSize
}

// GetUsedSizeOk returns a tuple with the UsedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetUsedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedSize) {
		return nil, false
	}
	return o.UsedSize, true
}

// HasUsedSize returns a boolean if a field has been set.
func (o *VolumesInstance) HasUsedSize() bool {
	if o != nil && !IsNil(o.UsedSize) {
		return true
	}

	return false
}

// SetUsedSize gets a reference to the given int64 and assigns it to the UsedSize field.
func (o *VolumesInstance) SetUsedSize(v int64) {
	o.UsedSize = &v
}

// GetUsedSizeUnique returns the UsedSizeUnique field value if set, zero value otherwise.
func (o *VolumesInstance) GetUsedSizeUnique() int64 {
	if o == nil || IsNil(o.UsedSizeUnique) {
		var ret int64
		return ret
	}
	return *o.UsedSizeUnique
}

// GetUsedSizeUniqueOk returns a tuple with the UsedSizeUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumesInstance) GetUsedSizeUniqueOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedSizeUnique) {
		return nil, false
	}
	return o.UsedSizeUnique, true
}

// HasUsedSizeUnique returns a boolean if a field has been set.
func (o *VolumesInstance) HasUsedSizeUnique() bool {
	if o != nil && !IsNil(o.UsedSizeUnique) {
		return true
	}

	return false
}

// SetUsedSizeUnique gets a reference to the given int64 and assigns it to the UsedSizeUnique field.
func (o *VolumesInstance) SetUsedSizeUnique(v int64) {
	o.UsedSizeUnique = &v
}

func (o VolumesInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumesInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.SystemId) {
		toSerialize["system_id"] = o.SystemId
	}
	if !IsNil(o.SystemType) {
		toSerialize["system_type"] = o.SystemType
	}
	if !IsNil(o.AllocatedSize) {
		toSerialize["allocated_size"] = o.AllocatedSize
	}
	if !IsNil(o.Bandwidth) {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if !IsNil(o.ConsistencyGroupName) {
		toSerialize["consistency_group_name"] = o.ConsistencyGroupName
	}
	if !IsNil(o.DataReductionPercent) {
		toSerialize["data_reduction_percent"] = o.DataReductionPercent
	}
	if !IsNil(o.DataReductionRatio) {
		toSerialize["data_reduction_ratio"] = o.DataReductionRatio
	}
	if !IsNil(o.DataReductionSavedSize) {
		toSerialize["data_reduction_saved_size"] = o.DataReductionSavedSize
	}
	if !IsNil(o.IoLimitPolicyName) {
		toSerialize["io_limit_policy_name"] = o.IoLimitPolicyName
	}
	if !IsNil(o.Iops) {
		toSerialize["iops"] = o.Iops
	}
	if !IsNil(o.IsCompressedOrDeduped) {
		toSerialize["is_compressed_or_deduped"] = o.IsCompressedOrDeduped
	}
	if !IsNil(o.IsThinEnabled) {
		toSerialize["is_thin_enabled"] = o.IsThinEnabled
	}
	if !IsNil(o.IssueCount) {
		toSerialize["issue_count"] = o.IssueCount
	}
	if !IsNil(o.Latency) {
		toSerialize["latency"] = o.Latency
	}
	if !IsNil(o.LogicalSize) {
		toSerialize["logical_size"] = o.LogicalSize
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NativeId) {
		toSerialize["native_id"] = o.NativeId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PoolId) {
		toSerialize["pool_id"] = o.PoolId
	}
	if !IsNil(o.PoolName) {
		toSerialize["pool_name"] = o.PoolName
	}
	if !IsNil(o.PoolType) {
		toSerialize["pool_type"] = o.PoolType
	}
	if !IsNil(o.SnapshotCount) {
		toSerialize["snapshot_count"] = o.SnapshotCount
	}
	if !IsNil(o.SnapshotPolicy) {
		toSerialize["snapshot_policy"] = o.SnapshotPolicy
	}
	if !IsNil(o.SnapshotSize) {
		toSerialize["snapshot_size"] = o.SnapshotSize
	}
	if !IsNil(o.StorageResourceId) {
		toSerialize["storage_resource_id"] = o.StorageResourceId
	}
	if !IsNil(o.StorageResourceNativeId) {
		toSerialize["storage_resource_native_id"] = o.StorageResourceNativeId
	}
	if !IsNil(o.SystemModel) {
		toSerialize["system_model"] = o.SystemModel
	}
	if !IsNil(o.SystemName) {
		toSerialize["system_name"] = o.SystemName
	}
	if !IsNil(o.TotalSize) {
		toSerialize["total_size"] = o.TotalSize
	}
	if !IsNil(o.UsedSize) {
		toSerialize["used_size"] = o.UsedSize
	}
	if !IsNil(o.UsedSizeUnique) {
		toSerialize["used_size_unique"] = o.UsedSizeUnique
	}
	return toSerialize, nil
}

func (o *VolumesInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumesInstance := _VolumesInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumesInstance)

	if err != nil {
		return err
	}

	*o = VolumesInstance(varVolumesInstance)

	return err
}

type NullableVolumesInstance struct {
	value *VolumesInstance
	isSet bool
}

func (v NullableVolumesInstance) Get() *VolumesInstance {
	return v.value
}

func (v *NullableVolumesInstance) Set(val *VolumesInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumesInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumesInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumesInstance(val *VolumesInstance) *NullableVolumesInstance {
	return &NullableVolumesInstance{value: val, isSet: true}
}

func (v NullableVolumesInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumesInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


