/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the SubnetOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubnetOptions{}

// SubnetOptions Subnet Options
type SubnetOptions struct {
	// AWS subnet resource identifier
	Id *string `json:"id,omitempty"`
	// IP range that Apex Navigator will use to create new subnets and use it based on the  subnet option type.  If this is a new VPC, Apex Navigator also associates this CIDR block to the new VPC as primary or secondary  CIDR block. 
	CidrBlock *string `json:"cidr_block,omitempty"`
	Type *SubnetTypeEnum `json:"type,omitempty"`
}

// NewSubnetOptions instantiates a new SubnetOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetOptions() *SubnetOptions {
	this := SubnetOptions{}
	var type_ SubnetTypeEnum = SUBNETTYPEENUM_UNDEFINED
	this.Type = &type_
	return &this
}

// NewSubnetOptionsWithDefaults instantiates a new SubnetOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetOptionsWithDefaults() *SubnetOptions {
	this := SubnetOptions{}
	var type_ SubnetTypeEnum = SUBNETTYPEENUM_UNDEFINED
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubnetOptions) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetOptions) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubnetOptions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubnetOptions) SetId(v string) {
	o.Id = &v
}

// GetCidrBlock returns the CidrBlock field value if set, zero value otherwise.
func (o *SubnetOptions) GetCidrBlock() string {
	if o == nil || IsNil(o.CidrBlock) {
		var ret string
		return ret
	}
	return *o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetOptions) GetCidrBlockOk() (*string, bool) {
	if o == nil || IsNil(o.CidrBlock) {
		return nil, false
	}
	return o.CidrBlock, true
}

// HasCidrBlock returns a boolean if a field has been set.
func (o *SubnetOptions) HasCidrBlock() bool {
	if o != nil && !IsNil(o.CidrBlock) {
		return true
	}

	return false
}

// SetCidrBlock gets a reference to the given string and assigns it to the CidrBlock field.
func (o *SubnetOptions) SetCidrBlock(v string) {
	o.CidrBlock = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubnetOptions) GetType() SubnetTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret SubnetTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetOptions) GetTypeOk() (*SubnetTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubnetOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SubnetTypeEnum and assigns it to the Type field.
func (o *SubnetOptions) SetType(v SubnetTypeEnum) {
	o.Type = &v
}

func (o SubnetOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubnetOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CidrBlock) {
		toSerialize["cidr_block"] = o.CidrBlock
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSubnetOptions struct {
	value *SubnetOptions
	isSet bool
}

func (v NullableSubnetOptions) Get() *SubnetOptions {
	return v.value
}

func (v *NullableSubnetOptions) Set(val *SubnetOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetOptions(val *SubnetOptions) *NullableSubnetOptions {
	return &NullableSubnetOptions{value: val, isSet: true}
}

func (v NullableSubnetOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


