/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SubnetTypeEnum Enum for the usage type of subnet
type SubnetTypeEnum string

// List of SubnetTypeEnum
const (
	SUBNETTYPEENUM_UNDEFINED SubnetTypeEnum = "UNDEFINED"
	SUBNETTYPEENUM_EXTERNAL SubnetTypeEnum = "EXTERNAL"
	SUBNETTYPEENUM_INTERNAL SubnetTypeEnum = "INTERNAL"
)

// All allowed values of SubnetTypeEnum enum
var AllowedSubnetTypeEnumEnumValues = []SubnetTypeEnum{
	"UNDEFINED",
	"EXTERNAL",
	"INTERNAL",
}

func (v *SubnetTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubnetTypeEnum(value)
	for _, existing := range AllowedSubnetTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubnetTypeEnum", value)
}

// NewSubnetTypeEnumFromValue returns a pointer to a valid SubnetTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubnetTypeEnumFromValue(v string) (*SubnetTypeEnum, error) {
	ev := SubnetTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubnetTypeEnum: valid values are %v", v, AllowedSubnetTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubnetTypeEnum) IsValid() bool {
	for _, existing := range AllowedSubnetTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubnetTypeEnum value
func (v SubnetTypeEnum) Ptr() *SubnetTypeEnum {
	return &v
}

type NullableSubnetTypeEnum struct {
	value *SubnetTypeEnum
	isSet bool
}

func (v NullableSubnetTypeEnum) Get() *SubnetTypeEnum {
	return v.value
}

func (v *NullableSubnetTypeEnum) Set(val *SubnetTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetTypeEnum(val *SubnetTypeEnum) *NullableSubnetTypeEnum {
	return &NullableSubnetTypeEnum{value: val, isSet: true}
}

func (v NullableSubnetTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

