/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// LicensesExpirationTypeEnum The various types of license duration or expiration. * TRIAL - A short-term license to sample functionality. * EXT_TRIAL - A one-time extension to an existing trial license. * TIME_LIMITED - A license with an expiration time. * GRACE_PERIOD - A time-limited license that allows a short period of continued use after expiration. * RESTRICTED - A time limited license that restricts functionality after expiration. Generally allows use of existing configuration but not provisioning and some kinds of configuration changes. * PERMANENT - A non-expiring license. 
type LicensesExpirationTypeEnum string

// List of LicensesExpirationTypeEnum
const (
	LICENSESEXPIRATIONTYPEENUM_TRIAL LicensesExpirationTypeEnum = "TRIAL"
	LICENSESEXPIRATIONTYPEENUM_EXT_TRIAL LicensesExpirationTypeEnum = "EXT_TRIAL"
	LICENSESEXPIRATIONTYPEENUM_TIME_LIMITED LicensesExpirationTypeEnum = "TIME_LIMITED"
	LICENSESEXPIRATIONTYPEENUM_GRACE_PERIOD LicensesExpirationTypeEnum = "GRACE_PERIOD"
	LICENSESEXPIRATIONTYPEENUM_RESTRICTED LicensesExpirationTypeEnum = "RESTRICTED"
	LICENSESEXPIRATIONTYPEENUM_PERMANENT LicensesExpirationTypeEnum = "PERMANENT"
)

// All allowed values of LicensesExpirationTypeEnum enum
var AllowedLicensesExpirationTypeEnumEnumValues = []LicensesExpirationTypeEnum{
	"TRIAL",
	"EXT_TRIAL",
	"TIME_LIMITED",
	"GRACE_PERIOD",
	"RESTRICTED",
	"PERMANENT",
}

func (v *LicensesExpirationTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LicensesExpirationTypeEnum(value)
	for _, existing := range AllowedLicensesExpirationTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LicensesExpirationTypeEnum", value)
}

// NewLicensesExpirationTypeEnumFromValue returns a pointer to a valid LicensesExpirationTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicensesExpirationTypeEnumFromValue(v string) (*LicensesExpirationTypeEnum, error) {
	ev := LicensesExpirationTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LicensesExpirationTypeEnum: valid values are %v", v, AllowedLicensesExpirationTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicensesExpirationTypeEnum) IsValid() bool {
	for _, existing := range AllowedLicensesExpirationTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LicensesExpirationTypeEnum value
func (v LicensesExpirationTypeEnum) Ptr() *LicensesExpirationTypeEnum {
	return &v
}

type NullableLicensesExpirationTypeEnum struct {
	value *LicensesExpirationTypeEnum
	isSet bool
}

func (v NullableLicensesExpirationTypeEnum) Get() *LicensesExpirationTypeEnum {
	return v.value
}

func (v *NullableLicensesExpirationTypeEnum) Set(val *LicensesExpirationTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensesExpirationTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensesExpirationTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensesExpirationTypeEnum(val *LicensesExpirationTypeEnum) *NullableLicensesExpirationTypeEnum {
	return &NullableLicensesExpirationTypeEnum{value: val, isSet: true}
}

func (v NullableLicensesExpirationTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensesExpirationTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

