/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the EntitlementsInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitlementsInstance{}

// EntitlementsInstance Properties of a entitlements instance.
type EntitlementsInstance struct {
	// Unique identifier of a entitlements resource.
	Id *string `json:"id,omitempty"`
	ProductType *ProductsTypeEnum `json:"product_type,omitempty"`
	LicenseType *LicensesTypeEnum `json:"license_type,omitempty"`
	ExpirationType *LicensesExpirationTypeEnum `json:"expiration_type,omitempty"`
	// For a CAPACITY type entitlement, the limit on the entitlement, which limits the total capacity of activated licenses from this entitlement. 
	PurchasedCapacity *int64 `json:"purchased_capacity,omitempty"`
	// For a CAPACITY type entitlement, the current sum of the capacities of the activated licenses from this entitlement. 
	ActivatedCapacity *int64 `json:"activated_capacity,omitempty"`
	// For a CAPACITY type entitlement, the unactivated capacity, which is purchased_capacity-activated_capacity. 
	AvailableCapacity *int64 `json:"available_capacity,omitempty"`
	CapacityUnits *LicensesCapacityUnitsEnum `json:"capacity_units,omitempty"`
	// The time at which the entitlement began. 
	StartTime *time.Time `json:"start_time,omitempty"`
	// For a TRIAL, EXT_TRIAL, TIME_LIMITED, GRACE_PERIOD, or RESTRICTED expiration type entitlement, the time at which the entitlement expires. 
	ExpirationTime *time.Time `json:"expiration_time,omitempty"`
}

// NewEntitlementsInstance instantiates a new EntitlementsInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementsInstance() *EntitlementsInstance {
	this := EntitlementsInstance{}
	var capacityUnits LicensesCapacityUnitsEnum = LICENSESCAPACITYUNITSENUM_COUNT
	this.CapacityUnits = &capacityUnits
	return &this
}

// NewEntitlementsInstanceWithDefaults instantiates a new EntitlementsInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementsInstanceWithDefaults() *EntitlementsInstance {
	this := EntitlementsInstance{}
	var capacityUnits LicensesCapacityUnitsEnum = LICENSESCAPACITYUNITSENUM_COUNT
	this.CapacityUnits = &capacityUnits
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EntitlementsInstance) SetId(v string) {
	o.Id = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetProductType() ProductsTypeEnum {
	if o == nil || IsNil(o.ProductType) {
		var ret ProductsTypeEnum
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetProductTypeOk() (*ProductsTypeEnum, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ProductsTypeEnum and assigns it to the ProductType field.
func (o *EntitlementsInstance) SetProductType(v ProductsTypeEnum) {
	o.ProductType = &v
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetLicenseType() LicensesTypeEnum {
	if o == nil || IsNil(o.LicenseType) {
		var ret LicensesTypeEnum
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetLicenseTypeOk() (*LicensesTypeEnum, bool) {
	if o == nil || IsNil(o.LicenseType) {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasLicenseType() bool {
	if o != nil && !IsNil(o.LicenseType) {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given LicensesTypeEnum and assigns it to the LicenseType field.
func (o *EntitlementsInstance) SetLicenseType(v LicensesTypeEnum) {
	o.LicenseType = &v
}

// GetExpirationType returns the ExpirationType field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetExpirationType() LicensesExpirationTypeEnum {
	if o == nil || IsNil(o.ExpirationType) {
		var ret LicensesExpirationTypeEnum
		return ret
	}
	return *o.ExpirationType
}

// GetExpirationTypeOk returns a tuple with the ExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetExpirationTypeOk() (*LicensesExpirationTypeEnum, bool) {
	if o == nil || IsNil(o.ExpirationType) {
		return nil, false
	}
	return o.ExpirationType, true
}

// HasExpirationType returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasExpirationType() bool {
	if o != nil && !IsNil(o.ExpirationType) {
		return true
	}

	return false
}

// SetExpirationType gets a reference to the given LicensesExpirationTypeEnum and assigns it to the ExpirationType field.
func (o *EntitlementsInstance) SetExpirationType(v LicensesExpirationTypeEnum) {
	o.ExpirationType = &v
}

// GetPurchasedCapacity returns the PurchasedCapacity field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetPurchasedCapacity() int64 {
	if o == nil || IsNil(o.PurchasedCapacity) {
		var ret int64
		return ret
	}
	return *o.PurchasedCapacity
}

// GetPurchasedCapacityOk returns a tuple with the PurchasedCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetPurchasedCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.PurchasedCapacity) {
		return nil, false
	}
	return o.PurchasedCapacity, true
}

// HasPurchasedCapacity returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasPurchasedCapacity() bool {
	if o != nil && !IsNil(o.PurchasedCapacity) {
		return true
	}

	return false
}

// SetPurchasedCapacity gets a reference to the given int64 and assigns it to the PurchasedCapacity field.
func (o *EntitlementsInstance) SetPurchasedCapacity(v int64) {
	o.PurchasedCapacity = &v
}

// GetActivatedCapacity returns the ActivatedCapacity field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetActivatedCapacity() int64 {
	if o == nil || IsNil(o.ActivatedCapacity) {
		var ret int64
		return ret
	}
	return *o.ActivatedCapacity
}

// GetActivatedCapacityOk returns a tuple with the ActivatedCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetActivatedCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.ActivatedCapacity) {
		return nil, false
	}
	return o.ActivatedCapacity, true
}

// HasActivatedCapacity returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasActivatedCapacity() bool {
	if o != nil && !IsNil(o.ActivatedCapacity) {
		return true
	}

	return false
}

// SetActivatedCapacity gets a reference to the given int64 and assigns it to the ActivatedCapacity field.
func (o *EntitlementsInstance) SetActivatedCapacity(v int64) {
	o.ActivatedCapacity = &v
}

// GetAvailableCapacity returns the AvailableCapacity field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetAvailableCapacity() int64 {
	if o == nil || IsNil(o.AvailableCapacity) {
		var ret int64
		return ret
	}
	return *o.AvailableCapacity
}

// GetAvailableCapacityOk returns a tuple with the AvailableCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetAvailableCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.AvailableCapacity) {
		return nil, false
	}
	return o.AvailableCapacity, true
}

// HasAvailableCapacity returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasAvailableCapacity() bool {
	if o != nil && !IsNil(o.AvailableCapacity) {
		return true
	}

	return false
}

// SetAvailableCapacity gets a reference to the given int64 and assigns it to the AvailableCapacity field.
func (o *EntitlementsInstance) SetAvailableCapacity(v int64) {
	o.AvailableCapacity = &v
}

// GetCapacityUnits returns the CapacityUnits field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetCapacityUnits() LicensesCapacityUnitsEnum {
	if o == nil || IsNil(o.CapacityUnits) {
		var ret LicensesCapacityUnitsEnum
		return ret
	}
	return *o.CapacityUnits
}

// GetCapacityUnitsOk returns a tuple with the CapacityUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetCapacityUnitsOk() (*LicensesCapacityUnitsEnum, bool) {
	if o == nil || IsNil(o.CapacityUnits) {
		return nil, false
	}
	return o.CapacityUnits, true
}

// HasCapacityUnits returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasCapacityUnits() bool {
	if o != nil && !IsNil(o.CapacityUnits) {
		return true
	}

	return false
}

// SetCapacityUnits gets a reference to the given LicensesCapacityUnitsEnum and assigns it to the CapacityUnits field.
func (o *EntitlementsInstance) SetCapacityUnits(v LicensesCapacityUnitsEnum) {
	o.CapacityUnits = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *EntitlementsInstance) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *EntitlementsInstance) GetExpirationTime() time.Time {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementsInstance) GetExpirationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *EntitlementsInstance) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given time.Time and assigns it to the ExpirationTime field.
func (o *EntitlementsInstance) SetExpirationTime(v time.Time) {
	o.ExpirationTime = &v
}

func (o EntitlementsInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitlementsInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProductType) {
		toSerialize["product_type"] = o.ProductType
	}
	if !IsNil(o.LicenseType) {
		toSerialize["license_type"] = o.LicenseType
	}
	if !IsNil(o.ExpirationType) {
		toSerialize["expiration_type"] = o.ExpirationType
	}
	if !IsNil(o.PurchasedCapacity) {
		toSerialize["purchased_capacity"] = o.PurchasedCapacity
	}
	if !IsNil(o.ActivatedCapacity) {
		toSerialize["activated_capacity"] = o.ActivatedCapacity
	}
	if !IsNil(o.AvailableCapacity) {
		toSerialize["available_capacity"] = o.AvailableCapacity
	}
	if !IsNil(o.CapacityUnits) {
		toSerialize["capacity_units"] = o.CapacityUnits
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	return toSerialize, nil
}

type NullableEntitlementsInstance struct {
	value *EntitlementsInstance
	isSet bool
}

func (v NullableEntitlementsInstance) Get() *EntitlementsInstance {
	return v.value
}

func (v *NullableEntitlementsInstance) Set(val *EntitlementsInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementsInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementsInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementsInstance(val *EntitlementsInstance) *NullableEntitlementsInstance {
	return &NullableEntitlementsInstance{value: val, isSet: true}
}

func (v NullableEntitlementsInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementsInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


