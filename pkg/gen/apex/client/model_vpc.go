/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Vpc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vpc{}

// Vpc VPC
type Vpc struct {
	// Create a new VPC. Default is false.
	IsNewVpc *bool `json:"is_new_vpc,omitempty"`
	// AWS VPC resource identifier.  Provide this value if you want Apex Navigator to deploy the storage system in your existing VPC. 
	Id *string `json:"id,omitempty"`
	// AWS VPC name. Provide only name (not id) if you want Apex Navigator to deploy the storage system in a new VPC. 
	Name *string `json:"name,omitempty"`
}

// NewVpc instantiates a new Vpc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpc() *Vpc {
	this := Vpc{}
	var isNewVpc bool = false
	this.IsNewVpc = &isNewVpc
	return &this
}

// NewVpcWithDefaults instantiates a new Vpc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcWithDefaults() *Vpc {
	this := Vpc{}
	var isNewVpc bool = false
	this.IsNewVpc = &isNewVpc
	return &this
}

// GetIsNewVpc returns the IsNewVpc field value if set, zero value otherwise.
func (o *Vpc) GetIsNewVpc() bool {
	if o == nil || IsNil(o.IsNewVpc) {
		var ret bool
		return ret
	}
	return *o.IsNewVpc
}

// GetIsNewVpcOk returns a tuple with the IsNewVpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vpc) GetIsNewVpcOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNewVpc) {
		return nil, false
	}
	return o.IsNewVpc, true
}

// HasIsNewVpc returns a boolean if a field has been set.
func (o *Vpc) HasIsNewVpc() bool {
	if o != nil && !IsNil(o.IsNewVpc) {
		return true
	}

	return false
}

// SetIsNewVpc gets a reference to the given bool and assigns it to the IsNewVpc field.
func (o *Vpc) SetIsNewVpc(v bool) {
	o.IsNewVpc = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Vpc) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vpc) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Vpc) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Vpc) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Vpc) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vpc) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Vpc) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Vpc) SetName(v string) {
	o.Name = &v
}

func (o Vpc) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vpc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsNewVpc) {
		toSerialize["is_new_vpc"] = o.IsNewVpc
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableVpc struct {
	value *Vpc
	isSet bool
}

func (v NullableVpc) Get() *Vpc {
	return v.value
}

func (v *NullableVpc) Set(val *Vpc) {
	v.value = val
	v.isSet = true
}

func (v NullableVpc) IsSet() bool {
	return v.isSet
}

func (v *NullableVpc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpc(val *Vpc) *NullableVpc {
	return &NullableVpc{value: val, isSet: true}
}

func (v NullableVpc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


