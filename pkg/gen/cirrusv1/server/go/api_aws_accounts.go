/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AwsAccountsAPIController binds http requests to an api service and writes the service results to the http response
type AwsAccountsAPIController struct {
	service      AwsAccountsAPIServicer
	errorHandler ErrorHandler
}

// AwsAccountsAPIOption for how the controller is set up.
type AwsAccountsAPIOption func(*AwsAccountsAPIController)

// WithAwsAccountsAPIErrorHandler inject ErrorHandler into controller
func WithAwsAccountsAPIErrorHandler(h ErrorHandler) AwsAccountsAPIOption {
	return func(c *AwsAccountsAPIController) {
		c.errorHandler = h
	}
}

// NewAwsAccountsAPIController creates a default api controller
func NewAwsAccountsAPIController(s AwsAccountsAPIServicer, opts ...AwsAccountsAPIOption) Router {
	controller := &AwsAccountsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AwsAccountsAPIController
func (c *AwsAccountsAPIController) Routes() Routes {
	return Routes{
		"AwsAccountsCollection": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/aws-accounts",
			c.AwsAccountsCollection,
		},
		"AwsAccountsCreate": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/aws-accounts",
			c.AwsAccountsCreate,
		},
		"AwsAccountsDelete": Route{
			strings.ToUpper("Delete"),
			"/rest/services/storage/v1/aws-accounts/{account_id}",
			c.AwsAccountsDelete,
		},
		"AwsAccountsGenerateTrustPolicy": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/aws-accounts/generate-trust-policy",
			c.AwsAccountsGenerateTrustPolicy,
		},
		"AwsAccountsInstance": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/aws-accounts/{account_id}",
			c.AwsAccountsInstance,
		},
		"AwsAccountsModify": Route{
			strings.ToUpper("Patch"),
			"/rest/services/storage/v1/aws-accounts/{account_id}",
			c.AwsAccountsModify,
		},
	}
}

// AwsAccountsCollection - List connected AWS accounts
func (c *AwsAccountsAPIController) AwsAccountsCollection(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AwsAccountsCollection(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AwsAccountsCreate - Connect AWS account
func (c *AwsAccountsAPIController) AwsAccountsCreate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	var correlationIdParam string
	if query.Has("correlation-id") {
		param := query.Get("correlation-id")

		correlationIdParam = param
	} else {
	}
	awsAccountsCreateInputParam := AwsAccountsCreateInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&awsAccountsCreateInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsAccountsCreateInputRequired(awsAccountsCreateInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAwsAccountsCreateInputConstraints(awsAccountsCreateInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AwsAccountsCreate(r.Context(), asyncParam, correlationIdParam, awsAccountsCreateInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AwsAccountsDelete - Disconnect AWS account
func (c *AwsAccountsAPIController) AwsAccountsDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountIdParam := params["account_id"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"account_id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	var correlationIdParam string
	if query.Has("correlation-id") {
		param := query.Get("correlation-id")

		correlationIdParam = param
	} else {
	}
	result, err := c.service.AwsAccountsDelete(r.Context(), accountIdParam, asyncParam, correlationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AwsAccountsGenerateTrustPolicy - Retrieve AWS Trust Policy
func (c *AwsAccountsAPIController) AwsAccountsGenerateTrustPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	var correlationIdParam string
	if query.Has("correlation-id") {
		param := query.Get("correlation-id")

		correlationIdParam = param
	} else {
	}
	awsTrustPolicyInputParam := AwsTrustPolicyInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&awsTrustPolicyInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsTrustPolicyInputRequired(awsTrustPolicyInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAwsTrustPolicyInputConstraints(awsTrustPolicyInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AwsAccountsGenerateTrustPolicy(r.Context(), asyncParam, correlationIdParam, awsTrustPolicyInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AwsAccountsInstance - Get connected AWS account
func (c *AwsAccountsAPIController) AwsAccountsInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountIdParam := params["account_id"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"account_id"}, nil)
		return
	}
	result, err := c.service.AwsAccountsInstance(r.Context(), accountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AwsAccountsModify - Update AWS role selection
func (c *AwsAccountsAPIController) AwsAccountsModify(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountIdParam := params["account_id"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"account_id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	var correlationIdParam string
	if query.Has("correlation-id") {
		param := query.Get("correlation-id")

		correlationIdParam = param
	} else {
	}
	awsAccountModifyInputParam := AwsAccountModifyInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&awsAccountModifyInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsAccountModifyInputRequired(awsAccountModifyInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAwsAccountModifyInputConstraints(awsAccountModifyInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AwsAccountsModify(r.Context(), accountIdParam, asyncParam, correlationIdParam, awsAccountModifyInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
