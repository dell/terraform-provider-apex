/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server


import (
	"fmt"
)


// HostInitiatorProtocolEnum : Type of the host
type HostInitiatorProtocolEnum string

// List of HostInitiatorProtocolEnum
const (
	HOSTINITIATORPROTOCOLENUM_NVME HostInitiatorProtocolEnum = "NVMe"
	HOSTINITIATORPROTOCOLENUM_SDC HostInitiatorProtocolEnum = "SDC"
)

// AllowedHostInitiatorProtocolEnumEnumValues is all the allowed values of HostInitiatorProtocolEnum enum
var AllowedHostInitiatorProtocolEnumEnumValues = []HostInitiatorProtocolEnum{
	"NVMe",
	"SDC",
}

// validHostInitiatorProtocolEnumEnumValue provides a map of HostInitiatorProtocolEnums for fast verification of use input
var validHostInitiatorProtocolEnumEnumValues = map[HostInitiatorProtocolEnum]struct{}{
	"NVMe": {},
	"SDC": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostInitiatorProtocolEnum) IsValid() bool {
	_, ok := validHostInitiatorProtocolEnumEnumValues[v]
	return ok
}

// NewHostInitiatorProtocolEnumFromValue returns a pointer to a valid HostInitiatorProtocolEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostInitiatorProtocolEnumFromValue(v string) (HostInitiatorProtocolEnum, error) {
	ev := HostInitiatorProtocolEnum(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for HostInitiatorProtocolEnum: valid values are %v", v, AllowedHostInitiatorProtocolEnumEnumValues)
	}
}



// AssertHostInitiatorProtocolEnumRequired checks if the required fields are not zero-ed
func AssertHostInitiatorProtocolEnumRequired(obj HostInitiatorProtocolEnum) error {
	return nil
}

// AssertHostInitiatorProtocolEnumConstraints checks if the values respects the defined constraints
func AssertHostInitiatorProtocolEnumConstraints(obj HostInitiatorProtocolEnum) error {
	return nil
}
