/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server


import (
	"errors"
)



// MobilityTarget - MobilityTarget
type MobilityTarget struct {

	// Idenifier of this target mobility group
	Id string `json:"id"`

	// Name of the mobility target
	Name string `json:"name"`

	// Description of the mobility target
	Description string `json:"description"`

	SystemType StorageSystemTypeEnum `json:"system_type,omitempty"`

	// ID of the target system
	SystemId string `json:"system_id"`

	// ID of the source mobility group
	SourceMobilityGroupId string `json:"source_mobility_group_id"`

	// Timestamp from when the group was created
	CreationTimestamp string `json:"creation_timestamp"`

	// Timestamp of the last source image copied to this target
	ImageTimestamp string `json:"image_timestamp,omitempty"`

	LastCopyJobId string `json:"last_copy_job_id,omitempty"`

	TargetMembers []MobilityMemberMap `json:"target_members,omitempty"`

	// Bandwidth limit in Mbps (Mega bits per second).
	BandwidthLimit int32 `json:"bandwidth_limit,omitempty"`
}

// AssertMobilityTargetRequired checks if the required fields are not zero-ed
func AssertMobilityTargetRequired(obj MobilityTarget) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"description": obj.Description,
		"system_id": obj.SystemId,
		"source_mobility_group_id": obj.SourceMobilityGroupId,
		"creation_timestamp": obj.CreationTimestamp,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.TargetMembers {
		if err := AssertMobilityMemberMapRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertMobilityTargetConstraints checks if the values respects the defined constraints
func AssertMobilityTargetConstraints(obj MobilityTarget) error {
	if obj.BandwidthLimit < 1 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
