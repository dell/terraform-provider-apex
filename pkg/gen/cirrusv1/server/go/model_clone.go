/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server




// Clone - This is a clone of the storage objects on a remote system/destination.
type Clone struct {

	//  Identifier of the cloned object.
	Id string `json:"id"`

	// Name of the clone.
	Name string `json:"name"`

	// Description of the clone.
	Description string `json:"description"`

	MobilityTargetId string `json:"mobility_target_id,omitempty"`

	// When the clone was created
	CreationTimestamp string `json:"creation_timestamp"`

	// When the clone was last updated
	RefreshTimestamp string `json:"refresh_timestamp"`

	ImageTimestamp string `json:"image_timestamp"`

	// A list of storage object identifiers representing the copied instance on the destination/target for which a clone is created. 
	CloneVolumes []CloneMobilityMember `json:"clone_volumes"`

	// A list of the hosts/SDCs mapped to the clone
	HostMappings []CloneToHostMapping `json:"host_mappings"`
}

// AssertCloneRequired checks if the required fields are not zero-ed
func AssertCloneRequired(obj Clone) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"description": obj.Description,
		"creation_timestamp": obj.CreationTimestamp,
		"refresh_timestamp": obj.RefreshTimestamp,
		"image_timestamp": obj.ImageTimestamp,
		"clone_volumes": obj.CloneVolumes,
		"host_mappings": obj.HostMappings,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.CloneVolumes {
		if err := AssertCloneMobilityMemberRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.HostMappings {
		if err := AssertCloneToHostMappingRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertCloneConstraints checks if the values respects the defined constraints
func AssertCloneConstraints(obj Clone) error {
	return nil
}
