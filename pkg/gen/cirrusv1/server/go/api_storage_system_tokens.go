/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// StorageSystemTokensAPIController binds http requests to an api service and writes the service results to the http response
type StorageSystemTokensAPIController struct {
	service      StorageSystemTokensAPIServicer
	errorHandler ErrorHandler
}

// StorageSystemTokensAPIOption for how the controller is set up.
type StorageSystemTokensAPIOption func(*StorageSystemTokensAPIController)

// WithStorageSystemTokensAPIErrorHandler inject ErrorHandler into controller
func WithStorageSystemTokensAPIErrorHandler(h ErrorHandler) StorageSystemTokensAPIOption {
	return func(c *StorageSystemTokensAPIController) {
		c.errorHandler = h
	}
}

// NewStorageSystemTokensAPIController creates a default api controller
func NewStorageSystemTokensAPIController(s StorageSystemTokensAPIServicer, opts ...StorageSystemTokensAPIOption) Router {
	controller := &StorageSystemTokensAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the StorageSystemTokensAPIController
func (c *StorageSystemTokensAPIController) Routes() Routes {
	return Routes{
		"StorageSystemTokensCreate": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/storage-system-tokens",
			c.StorageSystemTokensCreate,
		},
		"StorageSystemTokensInstance": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/storage-system-tokens/{id}",
			c.StorageSystemTokensInstance,
		},
		"StorageSystemTokensModify": Route{
			strings.ToUpper("Patch"),
			"/rest/services/storage/v1/storage-system-tokens/{id}",
			c.StorageSystemTokensModify,
		},
	}
}

// StorageSystemTokensCreate - Activate the storage system token.
func (c *StorageSystemTokensAPIController) StorageSystemTokensCreate(w http.ResponseWriter, r *http.Request) {
	storageSystemTokensCreateRequestParam := StorageSystemTokensCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageSystemTokensCreateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageSystemTokensCreateRequestRequired(storageSystemTokensCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageSystemTokensCreateRequestConstraints(storageSystemTokensCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.StorageSystemTokensCreate(r.Context(), storageSystemTokensCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StorageSystemTokensInstance - Instance by id.
func (c *StorageSystemTokensAPIController) StorageSystemTokensInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.StorageSystemTokensInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StorageSystemTokensModify - Update the storage system token.
func (c *StorageSystemTokensAPIController) StorageSystemTokensModify(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	storageSystemTokensModifyRequestParam := StorageSystemTokensModifyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageSystemTokensModifyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageSystemTokensModifyRequestRequired(storageSystemTokensModifyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageSystemTokensModifyRequestConstraints(storageSystemTokensModifyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.StorageSystemTokensModify(r.Context(), idParam, storageSystemTokensModifyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
