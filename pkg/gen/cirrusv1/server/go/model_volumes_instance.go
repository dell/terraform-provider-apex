/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server




// VolumesInstance - The volume object.
type VolumesInstance struct {

	// Identifier of the volume.
	Id string `json:"id"`

	// Unique identifier for the device or appliance.
	SystemId string `json:"system_id,omitempty"`

	// Type of the system for the volume.
	SystemType string `json:"system_type,omitempty"`

	// The allocated size of the volume - Unit: bytes
	AllocatedSize int64 `json:"allocated_size,omitempty"`

	// The bandwidth consumed by the volume. Aggregated for a rolling average over the last 24 hours - Unit: bytes/s
	Bandwidth int64 `json:"bandwidth,omitempty"`

	// Consistency group name of the volume.
	ConsistencyGroupName string `json:"consistency_group_name,omitempty"`

	// The data reduction percent for the volume.
	DataReductionPercent float64 `json:"data_reduction_percent,omitempty"`

	// The data reduction ratio for the volume.
	DataReductionRatio float64 `json:"data_reduction_ratio,omitempty"`

	// The data reduction capacity saved for the volume - Unit: bytes
	DataReductionSavedSize int64 `json:"data_reduction_saved_size,omitempty"`

	// The IO limit policy name for the volume.
	IoLimitPolicyName string `json:"io_limit_policy_name,omitempty"`

	// The IOPS for the volume. Aggregated for a rolling average over the last 24 hours - Unit: IO/s
	Iops int64 `json:"iops,omitempty"`

	// Identifies whether the volume is compressed or deduplicated.
	IsCompressedOrDeduped string `json:"is_compressed_or_deduped,omitempty"`

	// Identifies whether the volume has thin provisioning enabled.
	IsThinEnabled bool `json:"is_thin_enabled,omitempty"`

	// Number of health issues that are present on the volume.
	IssueCount int64 `json:"issue_count,omitempty"`

	// The latency for the volume. Aggregated for a rolling average over the last 24 hours - Unit: microseconds
	Latency int64 `json:"latency,omitempty"`

	// The logical size for the volume - Unit: bytes
	LogicalSize int64 `json:"logical_size,omitempty"`

	// The name of the volume.
	Name string `json:"name,omitempty"`

	// Identifier of the volume, defined by the system.
	NativeId string `json:"native_id,omitempty"`

	// Type of the volume, which is either LUN or VOLUME.
	Type string `json:"type,omitempty"`

	// The pool identifier for the volume.
	PoolId string `json:"pool_id,omitempty"`

	// The pool name for the volume.
	PoolName string `json:"pool_name,omitempty"`

	// Type of the pool.
	PoolType string `json:"pool_type,omitempty"`

	// The snapshot count for the volume.
	SnapshotCount int64 `json:"snapshot_count,omitempty"`

	// The snapshot policy for the volume.
	SnapshotPolicy string `json:"snapshot_policy,omitempty"`

	// The snapshot size for the volume - Unit: bytes
	SnapshotSize int64 `json:"snapshot_size,omitempty"`

	// The storage resource identifier for the volume.
	StorageResourceId string `json:"storage_resource_id,omitempty"`

	// The storage resource native identifier for the volume.
	StorageResourceNativeId string `json:"storage_resource_native_id,omitempty"`

	// The model of the system.
	SystemModel string `json:"system_model,omitempty"`

	// Name of the system for the volume.
	SystemName string `json:"system_name,omitempty"`

	// The total provisioned size of the volume - Unit: bytes
	TotalSize int64 `json:"total_size,omitempty"`

	// The used size of the volume - Unit: bytes
	UsedSize int64 `json:"used_size,omitempty"`

	// The unique used size of the volume - Unit: bytes
	UsedSizeUnique int64 `json:"used_size_unique,omitempty"`
}

// AssertVolumesInstanceRequired checks if the required fields are not zero-ed
func AssertVolumesInstanceRequired(obj VolumesInstance) error {
	elements := map[string]interface{}{
		"id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertVolumesInstanceConstraints checks if the values respects the defined constraints
func AssertVolumesInstanceConstraints(obj VolumesInstance) error {
	return nil
}
