/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// EntitlementsAPIController binds http requests to an api service and writes the service results to the http response
type EntitlementsAPIController struct {
	service      EntitlementsAPIServicer
	errorHandler ErrorHandler
}

// EntitlementsAPIOption for how the controller is set up.
type EntitlementsAPIOption func(*EntitlementsAPIController)

// WithEntitlementsAPIErrorHandler inject ErrorHandler into controller
func WithEntitlementsAPIErrorHandler(h ErrorHandler) EntitlementsAPIOption {
	return func(c *EntitlementsAPIController) {
		c.errorHandler = h
	}
}

// NewEntitlementsAPIController creates a default api controller
func NewEntitlementsAPIController(s EntitlementsAPIServicer, opts ...EntitlementsAPIOption) Router {
	controller := &EntitlementsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EntitlementsAPIController
func (c *EntitlementsAPIController) Routes() Routes {
	return Routes{
		"EntitlementsCollection": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/entitlements",
			c.EntitlementsCollection,
		},
		"EntitlementsInstance": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/entitlements/{id}",
			c.EntitlementsInstance,
		},
	}
}

// EntitlementsCollection - Collection Query
func (c *EntitlementsAPIController) EntitlementsCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.EntitlementsCollection(r.Context(), filterParam, select_Param, orderParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EntitlementsInstance - Instance Query
func (c *EntitlementsAPIController) EntitlementsInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	result, err := c.service.EntitlementsInstance(r.Context(), idParam, select_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
