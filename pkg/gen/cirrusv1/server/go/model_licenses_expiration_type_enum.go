/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server


import (
	"fmt"
)


// LicensesExpirationTypeEnum : The various types of license duration or expiration. * TRIAL - A short-term license to sample functionality. * EXT_TRIAL - A one-time extension to an existing trial license. * TIME_LIMITED - A license with an expiration time. * GRACE_PERIOD - A time-limited license that allows a short period of continued use after expiration. * RESTRICTED - A time limited license that restricts functionality after expiration. Generally allows use of existing configuration but not provisioning and some kinds of configuration changes. * PERMANENT - A non-expiring license. 
type LicensesExpirationTypeEnum string

// List of LicensesExpirationTypeEnum
const (
	LICENSESEXPIRATIONTYPEENUM_TRIAL LicensesExpirationTypeEnum = "TRIAL"
	LICENSESEXPIRATIONTYPEENUM_EXT_TRIAL LicensesExpirationTypeEnum = "EXT_TRIAL"
	LICENSESEXPIRATIONTYPEENUM_TIME_LIMITED LicensesExpirationTypeEnum = "TIME_LIMITED"
	LICENSESEXPIRATIONTYPEENUM_GRACE_PERIOD LicensesExpirationTypeEnum = "GRACE_PERIOD"
	LICENSESEXPIRATIONTYPEENUM_RESTRICTED LicensesExpirationTypeEnum = "RESTRICTED"
	LICENSESEXPIRATIONTYPEENUM_PERMANENT LicensesExpirationTypeEnum = "PERMANENT"
)

// AllowedLicensesExpirationTypeEnumEnumValues is all the allowed values of LicensesExpirationTypeEnum enum
var AllowedLicensesExpirationTypeEnumEnumValues = []LicensesExpirationTypeEnum{
	"TRIAL",
	"EXT_TRIAL",
	"TIME_LIMITED",
	"GRACE_PERIOD",
	"RESTRICTED",
	"PERMANENT",
}

// validLicensesExpirationTypeEnumEnumValue provides a map of LicensesExpirationTypeEnums for fast verification of use input
var validLicensesExpirationTypeEnumEnumValues = map[LicensesExpirationTypeEnum]struct{}{
	"TRIAL": {},
	"EXT_TRIAL": {},
	"TIME_LIMITED": {},
	"GRACE_PERIOD": {},
	"RESTRICTED": {},
	"PERMANENT": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicensesExpirationTypeEnum) IsValid() bool {
	_, ok := validLicensesExpirationTypeEnumEnumValues[v]
	return ok
}

// NewLicensesExpirationTypeEnumFromValue returns a pointer to a valid LicensesExpirationTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicensesExpirationTypeEnumFromValue(v string) (LicensesExpirationTypeEnum, error) {
	ev := LicensesExpirationTypeEnum(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for LicensesExpirationTypeEnum: valid values are %v", v, AllowedLicensesExpirationTypeEnumEnumValues)
	}
}



// AssertLicensesExpirationTypeEnumRequired checks if the required fields are not zero-ed
func AssertLicensesExpirationTypeEnumRequired(obj LicensesExpirationTypeEnum) error {
	return nil
}

// AssertLicensesExpirationTypeEnumConstraints checks if the values respects the defined constraints
func AssertLicensesExpirationTypeEnumConstraints(obj LicensesExpirationTypeEnum) error {
	return nil
}
