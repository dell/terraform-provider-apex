/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// StorageSystemsAPIController binds http requests to an api service and writes the service results to the http response
type StorageSystemsAPIController struct {
	service      StorageSystemsAPIServicer
	errorHandler ErrorHandler
}

// StorageSystemsAPIOption for how the controller is set up.
type StorageSystemsAPIOption func(*StorageSystemsAPIController)

// WithStorageSystemsAPIErrorHandler inject ErrorHandler into controller
func WithStorageSystemsAPIErrorHandler(h ErrorHandler) StorageSystemsAPIOption {
	return func(c *StorageSystemsAPIController) {
		c.errorHandler = h
	}
}

// NewStorageSystemsAPIController creates a default api controller
func NewStorageSystemsAPIController(s StorageSystemsAPIServicer, opts ...StorageSystemsAPIOption) Router {
	controller := &StorageSystemsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the StorageSystemsAPIController
func (c *StorageSystemsAPIController) Routes() Routes {
	return Routes{
		"StorageSystemsCollection": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/storage-systems",
			c.StorageSystemsCollection,
		},
		"StorageSystemsCreate": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/storage-systems",
			c.StorageSystemsCreate,
		},
		"StorageSystemsDelete": Route{
			strings.ToUpper("Delete"),
			"/rest/services/storage/v1/storage-systems/{id}",
			c.StorageSystemsDelete,
		},
		"StorageSystemsFinalizeTrust": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/storage-systems/{id}/finalize-trust",
			c.StorageSystemsFinalizeTrust,
		},
		"StorageSystemsInitializeTrust": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/storage-systems/{id}/initialize-trust",
			c.StorageSystemsInitializeTrust,
		},
		"StorageSystemsInstance": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/storage-systems/{id}",
			c.StorageSystemsInstance,
		},
	}
}

// StorageSystemsCollection - Collection Query
func (c *StorageSystemsAPIController) StorageSystemsCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.StorageSystemsCollection(r.Context(), filterParam, select_Param, orderParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StorageSystemsCreate - Deploy a new storage system in cloud
func (c *StorageSystemsAPIController) StorageSystemsCreate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	xDELLEMCVISIBILITYParam := r.Header.Get("X-DELL-EMC-VISIBILITY")
	storageSystemDeploymentRequestParam := StorageSystemDeploymentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageSystemDeploymentRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageSystemDeploymentRequestRequired(storageSystemDeploymentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageSystemDeploymentRequestConstraints(storageSystemDeploymentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.StorageSystemsCreate(r.Context(), asyncParam, xDELLEMCVISIBILITYParam, storageSystemDeploymentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StorageSystemsDelete - Decommission storage system
func (c *StorageSystemsAPIController) StorageSystemsDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	result, err := c.service.StorageSystemsDelete(r.Context(), idParam, asyncParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StorageSystemsFinalizeTrust - Finalize system trust
func (c *StorageSystemsAPIController) StorageSystemsFinalizeTrust(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	storageSystemsFinalizeTrustPostRequestParam := StorageSystemsFinalizeTrustPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageSystemsFinalizeTrustPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageSystemsFinalizeTrustPostRequestRequired(storageSystemsFinalizeTrustPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageSystemsFinalizeTrustPostRequestConstraints(storageSystemsFinalizeTrustPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.StorageSystemsFinalizeTrust(r.Context(), idParam, storageSystemsFinalizeTrustPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StorageSystemsInitializeTrust - Initialize system trust
func (c *StorageSystemsAPIController) StorageSystemsInitializeTrust(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.StorageSystemsInitializeTrust(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StorageSystemsInstance - Instance Query
func (c *StorageSystemsAPIController) StorageSystemsInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	result, err := c.service.StorageSystemsInstance(r.Context(), idParam, select_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
