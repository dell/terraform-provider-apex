/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MobilityGroupsAPIController binds http requests to an api service and writes the service results to the http response
type MobilityGroupsAPIController struct {
	service      MobilityGroupsAPIServicer
	errorHandler ErrorHandler
}

// MobilityGroupsAPIOption for how the controller is set up.
type MobilityGroupsAPIOption func(*MobilityGroupsAPIController)

// WithMobilityGroupsAPIErrorHandler inject ErrorHandler into controller
func WithMobilityGroupsAPIErrorHandler(h ErrorHandler) MobilityGroupsAPIOption {
	return func(c *MobilityGroupsAPIController) {
		c.errorHandler = h
	}
}

// NewMobilityGroupsAPIController creates a default api controller
func NewMobilityGroupsAPIController(s MobilityGroupsAPIServicer, opts ...MobilityGroupsAPIOption) Router {
	controller := &MobilityGroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MobilityGroupsAPIController
func (c *MobilityGroupsAPIController) Routes() Routes {
	return Routes{
		"MobilityGroupsCollection": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/mobility-groups",
			c.MobilityGroupsCollection,
		},
		"MobilityGroupsCopy": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/mobility-groups/{mobility_group_id}/copy",
			c.MobilityGroupsCopy,
		},
		"MobilityGroupsCreate": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/mobility-groups",
			c.MobilityGroupsCreate,
		},
		"MobilityGroupsDelete": Route{
			strings.ToUpper("Delete"),
			"/rest/services/storage/v1/mobility-groups/{mobility_group_id}",
			c.MobilityGroupsDelete,
		},
		"MobilityGroupsInstance": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/mobility-groups/{mobility_group_id}",
			c.MobilityGroupsInstance,
		},
		"MobilityGroupsModify": Route{
			strings.ToUpper("Patch"),
			"/rest/services/storage/v1/mobility-groups/{mobility_group_id}",
			c.MobilityGroupsModify,
		},
	}
}

// MobilityGroupsCollection - Get Source Mobility Groups
func (c *MobilityGroupsAPIController) MobilityGroupsCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.MobilityGroupsCollection(r.Context(), filterParam, select_Param, orderParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityGroupsCopy - Start copy operation on DMG
func (c *MobilityGroupsAPIController) MobilityGroupsCopy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mobilityGroupIdParam := params["mobility_group_id"]
	if mobilityGroupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mobility_group_id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	startCopyInputParam := StartCopyInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&startCopyInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStartCopyInputRequired(startCopyInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStartCopyInputConstraints(startCopyInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MobilityGroupsCopy(r.Context(), mobilityGroupIdParam, asyncParam, startCopyInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityGroupsCreate - Create Source Mobility Group
func (c *MobilityGroupsAPIController) MobilityGroupsCreate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	sourceMobilityGroupInputParam := SourceMobilityGroupInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMobilityGroupInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSourceMobilityGroupInputRequired(sourceMobilityGroupInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSourceMobilityGroupInputConstraints(sourceMobilityGroupInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MobilityGroupsCreate(r.Context(), asyncParam, sourceMobilityGroupInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityGroupsDelete - Delete source mobility group
func (c *MobilityGroupsAPIController) MobilityGroupsDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mobilityGroupIdParam := params["mobility_group_id"]
	if mobilityGroupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mobility_group_id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	result, err := c.service.MobilityGroupsDelete(r.Context(), mobilityGroupIdParam, asyncParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityGroupsInstance - Get Source Mobility Group
func (c *MobilityGroupsAPIController) MobilityGroupsInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mobilityGroupIdParam := params["mobility_group_id"]
	if mobilityGroupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mobility_group_id"}, nil)
		return
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	result, err := c.service.MobilityGroupsInstance(r.Context(), mobilityGroupIdParam, select_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityGroupsModify - Update source mobility group
func (c *MobilityGroupsAPIController) MobilityGroupsModify(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mobilityGroupIdParam := params["mobility_group_id"]
	if mobilityGroupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mobility_group_id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	updateMobilityGroupInputParam := UpdateMobilityGroupInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateMobilityGroupInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateMobilityGroupInputRequired(updateMobilityGroupInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateMobilityGroupInputConstraints(updateMobilityGroupInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MobilityGroupsModify(r.Context(), mobilityGroupIdParam, asyncParam, updateMobilityGroupInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
