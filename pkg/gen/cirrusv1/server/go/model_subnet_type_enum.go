/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server


import (
	"fmt"
)


// SubnetTypeEnum : Enum for the usage type of subnet
type SubnetTypeEnum string

// List of SubnetTypeEnum
const (
	SUBNETTYPEENUM_UNDEFINED SubnetTypeEnum = "UNDEFINED"
	SUBNETTYPEENUM_EXTERNAL SubnetTypeEnum = "EXTERNAL"
	SUBNETTYPEENUM_INTERNAL SubnetTypeEnum = "INTERNAL"
)

// AllowedSubnetTypeEnumEnumValues is all the allowed values of SubnetTypeEnum enum
var AllowedSubnetTypeEnumEnumValues = []SubnetTypeEnum{
	"UNDEFINED",
	"EXTERNAL",
	"INTERNAL",
}

// validSubnetTypeEnumEnumValue provides a map of SubnetTypeEnums for fast verification of use input
var validSubnetTypeEnumEnumValues = map[SubnetTypeEnum]struct{}{
	"UNDEFINED": {},
	"EXTERNAL": {},
	"INTERNAL": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubnetTypeEnum) IsValid() bool {
	_, ok := validSubnetTypeEnumEnumValues[v]
	return ok
}

// NewSubnetTypeEnumFromValue returns a pointer to a valid SubnetTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubnetTypeEnumFromValue(v string) (SubnetTypeEnum, error) {
	ev := SubnetTypeEnum(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for SubnetTypeEnum: valid values are %v", v, AllowedSubnetTypeEnumEnumValues)
	}
}



// AssertSubnetTypeEnumRequired checks if the required fields are not zero-ed
func AssertSubnetTypeEnumRequired(obj SubnetTypeEnum) error {
	return nil
}

// AssertSubnetTypeEnumConstraints checks if the values respects the defined constraints
func AssertSubnetTypeEnumConstraints(obj SubnetTypeEnum) error {
	return nil
}
