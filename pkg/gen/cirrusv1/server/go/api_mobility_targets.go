/*
 * APEX Navigator for Multicloud Storage REST APIs
 *
 * The public API definitions for APEX Navigator for Multicloud Storage
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MobilityTargetsAPIController binds http requests to an api service and writes the service results to the http response
type MobilityTargetsAPIController struct {
	service      MobilityTargetsAPIServicer
	errorHandler ErrorHandler
}

// MobilityTargetsAPIOption for how the controller is set up.
type MobilityTargetsAPIOption func(*MobilityTargetsAPIController)

// WithMobilityTargetsAPIErrorHandler inject ErrorHandler into controller
func WithMobilityTargetsAPIErrorHandler(h ErrorHandler) MobilityTargetsAPIOption {
	return func(c *MobilityTargetsAPIController) {
		c.errorHandler = h
	}
}

// NewMobilityTargetsAPIController creates a default api controller
func NewMobilityTargetsAPIController(s MobilityTargetsAPIServicer, opts ...MobilityTargetsAPIOption) Router {
	controller := &MobilityTargetsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MobilityTargetsAPIController
func (c *MobilityTargetsAPIController) Routes() Routes {
	return Routes{
		"MobilityTargetsCollection": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/mobility-targets",
			c.MobilityTargetsCollection,
		},
		"MobilityTargetsCreate": Route{
			strings.ToUpper("Post"),
			"/rest/services/storage/v1/mobility-targets",
			c.MobilityTargetsCreate,
		},
		"MobilityTargetsDelete": Route{
			strings.ToUpper("Delete"),
			"/rest/services/storage/v1/mobility-targets/{mobility_target_id}",
			c.MobilityTargetsDelete,
		},
		"MobilityTargetsInstance": Route{
			strings.ToUpper("Get"),
			"/rest/services/storage/v1/mobility-targets/{mobility_target_id}",
			c.MobilityTargetsInstance,
		},
		"MobilityTargetsModify": Route{
			strings.ToUpper("Patch"),
			"/rest/services/storage/v1/mobility-targets/{mobility_target_id}",
			c.MobilityTargetsModify,
		},
	}
}

// MobilityTargetsCollection - Get Mobility Targets
func (c *MobilityTargetsAPIController) MobilityTargetsCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.MobilityTargetsCollection(r.Context(), filterParam, select_Param, orderParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityTargetsCreate - Create a mobility target
func (c *MobilityTargetsAPIController) MobilityTargetsCreate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	createTargetInputParam := CreateTargetInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createTargetInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateTargetInputRequired(createTargetInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateTargetInputConstraints(createTargetInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MobilityTargetsCreate(r.Context(), asyncParam, createTargetInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityTargetsDelete - Delete mobility target
func (c *MobilityTargetsAPIController) MobilityTargetsDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mobilityTargetIdParam := params["mobility_target_id"]
	if mobilityTargetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mobility_target_id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	result, err := c.service.MobilityTargetsDelete(r.Context(), mobilityTargetIdParam, asyncParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityTargetsInstance - Get Mobility Target
func (c *MobilityTargetsAPIController) MobilityTargetsInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mobilityTargetIdParam := params["mobility_target_id"]
	if mobilityTargetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mobility_target_id"}, nil)
		return
	}
	var select_Param string
	if query.Has("select") {
		param := query.Get("select")

		select_Param = param
	} else {
	}
	result, err := c.service.MobilityTargetsInstance(r.Context(), mobilityTargetIdParam, select_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MobilityTargetsModify - Update mobility target
func (c *MobilityTargetsAPIController) MobilityTargetsModify(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mobilityTargetIdParam := params["mobility_target_id"]
	if mobilityTargetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mobility_target_id"}, nil)
		return
	}
	var asyncParam bool
	if query.Has("async") {
		param, err := parseBoolParameter(
			query.Get("async"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		asyncParam = param
	} else {
		var param bool = false
		asyncParam = param
	}
	updateMobilityTargetInputParam := UpdateMobilityTargetInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateMobilityTargetInputParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateMobilityTargetInputRequired(updateMobilityTargetInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateMobilityTargetInputConstraints(updateMobilityTargetInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MobilityTargetsModify(r.Context(), mobilityTargetIdParam, asyncParam, updateMobilityTargetInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
