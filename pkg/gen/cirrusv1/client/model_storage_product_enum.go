/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// StorageProductEnum Enum for all the supported storage products * POWERFLEX - APEX block storage for cloud 
type StorageProductEnum string

// List of StorageProductEnum
const (
	STORAGEPRODUCTENUM_POWERFLEX StorageProductEnum = "POWERFLEX"
)

// All allowed values of StorageProductEnum enum
var AllowedStorageProductEnumEnumValues = []StorageProductEnum{
	"POWERFLEX",
}

func (v *StorageProductEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageProductEnum(value)
	for _, existing := range AllowedStorageProductEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageProductEnum", value)
}

// NewStorageProductEnumFromValue returns a pointer to a valid StorageProductEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageProductEnumFromValue(v string) (*StorageProductEnum, error) {
	ev := StorageProductEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageProductEnum: valid values are %v", v, AllowedStorageProductEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageProductEnum) IsValid() bool {
	for _, existing := range AllowedStorageProductEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageProductEnum value
func (v StorageProductEnum) Ptr() *StorageProductEnum {
	return &v
}

type NullableStorageProductEnum struct {
	value *StorageProductEnum
	isSet bool
}

func (v NullableStorageProductEnum) Get() *StorageProductEnum {
	return v.value
}

func (v *NullableStorageProductEnum) Set(val *StorageProductEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageProductEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageProductEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageProductEnum(val *StorageProductEnum) *NullableStorageProductEnum {
	return &NullableStorageProductEnum{value: val, isSet: true}
}

func (v NullableStorageProductEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageProductEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

