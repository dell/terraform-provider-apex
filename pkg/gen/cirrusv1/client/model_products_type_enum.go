/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ProductsTypeEnum Valid product (offering) types. * POWERFLEX - A PowerFlex storage system. 
type ProductsTypeEnum string

// List of ProductsTypeEnum
const (
	PRODUCTSTYPEENUM_POWERFLEX ProductsTypeEnum = "POWERFLEX"
)

// All allowed values of ProductsTypeEnum enum
var AllowedProductsTypeEnumEnumValues = []ProductsTypeEnum{
	"POWERFLEX",
}

func (v *ProductsTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductsTypeEnum(value)
	for _, existing := range AllowedProductsTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductsTypeEnum", value)
}

// NewProductsTypeEnumFromValue returns a pointer to a valid ProductsTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductsTypeEnumFromValue(v string) (*ProductsTypeEnum, error) {
	ev := ProductsTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductsTypeEnum: valid values are %v", v, AllowedProductsTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductsTypeEnum) IsValid() bool {
	for _, existing := range AllowedProductsTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductsTypeEnum value
func (v ProductsTypeEnum) Ptr() *ProductsTypeEnum {
	return &v
}

type NullableProductsTypeEnum struct {
	value *ProductsTypeEnum
	isSet bool
}

func (v NullableProductsTypeEnum) Get() *ProductsTypeEnum {
	return v.value
}

func (v *NullableProductsTypeEnum) Set(val *ProductsTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableProductsTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableProductsTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductsTypeEnum(val *ProductsTypeEnum) *NullableProductsTypeEnum {
	return &NullableProductsTypeEnum{value: val, isSet: true}
}

func (v NullableProductsTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductsTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

