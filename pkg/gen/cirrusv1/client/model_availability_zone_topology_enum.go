/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// AvailabilityZoneTopologyEnum This enum represents all the availability zone topology * SINGLE_AVAILABILITY_ZONE * MULTIPLE_AVAILABILITY_ZONE 
type AvailabilityZoneTopologyEnum string

// List of AvailabilityZoneTopologyEnum
const (
	AVAILABILITYZONETOPOLOGYENUM_SINGLE_AVAILABILITY_ZONE AvailabilityZoneTopologyEnum = "SINGLE_AVAILABILITY_ZONE"
	AVAILABILITYZONETOPOLOGYENUM_MULTIPLE_AVAILABILITY_ZONE AvailabilityZoneTopologyEnum = "MULTIPLE_AVAILABILITY_ZONE"
)

// All allowed values of AvailabilityZoneTopologyEnum enum
var AllowedAvailabilityZoneTopologyEnumEnumValues = []AvailabilityZoneTopologyEnum{
	"SINGLE_AVAILABILITY_ZONE",
	"MULTIPLE_AVAILABILITY_ZONE",
}

func (v *AvailabilityZoneTopologyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailabilityZoneTopologyEnum(value)
	for _, existing := range AllowedAvailabilityZoneTopologyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailabilityZoneTopologyEnum", value)
}

// NewAvailabilityZoneTopologyEnumFromValue returns a pointer to a valid AvailabilityZoneTopologyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailabilityZoneTopologyEnumFromValue(v string) (*AvailabilityZoneTopologyEnum, error) {
	ev := AvailabilityZoneTopologyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailabilityZoneTopologyEnum: valid values are %v", v, AllowedAvailabilityZoneTopologyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailabilityZoneTopologyEnum) IsValid() bool {
	for _, existing := range AllowedAvailabilityZoneTopologyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailabilityZoneTopologyEnum value
func (v AvailabilityZoneTopologyEnum) Ptr() *AvailabilityZoneTopologyEnum {
	return &v
}

type NullableAvailabilityZoneTopologyEnum struct {
	value *AvailabilityZoneTopologyEnum
	isSet bool
}

func (v NullableAvailabilityZoneTopologyEnum) Get() *AvailabilityZoneTopologyEnum {
	return v.value
}

func (v *NullableAvailabilityZoneTopologyEnum) Set(val *AvailabilityZoneTopologyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityZoneTopologyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityZoneTopologyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityZoneTopologyEnum(val *AvailabilityZoneTopologyEnum) *NullableAvailabilityZoneTopologyEnum {
	return &NullableAvailabilityZoneTopologyEnum{value: val, isSet: true}
}

func (v NullableAvailabilityZoneTopologyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityZoneTopologyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

