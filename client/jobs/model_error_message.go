/*
APEX Orchestration Platform - Job Management System (JMS) API

Provides management and visibility for APEX Orchestration Platform Jobs

API version: IGNORED - see resource tag's x-api-version for the specific version of this resource.
Contact: apex.mars@dell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the ErrorMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorMessage{}

// ErrorMessage A message describing the failure, a contributing factor to the failure, or possibly the aftermath of the failure.
type ErrorMessage struct {
	Severity *SeverityEnum `json:"severity,omitempty"`
	// Identifier for this kind of message. This is a string that can be used to look up  additional information on the support website. (Note - specific format can be determined  by platform - hex value codes are common in midrange storage.) 
	Code *string `json:"code,omitempty"`
	// Message string in English.
	Message *string `json:"message,omitempty"`
	// The time at which the error occurred.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Localized message string.
	MessageL10n *string `json:"message_l10n,omitempty"`
	// Ordered list of substitution args for the error message. Must match up with  the {0}, {1}, etc... actually in the message referenced by the message code  above, if any. 
	Arguments []string `json:"arguments,omitempty"`
}

// NewErrorMessage instantiates a new ErrorMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorMessage() *ErrorMessage {
	this := ErrorMessage{}
	return &this
}

// NewErrorMessageWithDefaults instantiates a new ErrorMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorMessageWithDefaults() *ErrorMessage {
	this := ErrorMessage{}
	return &this
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *ErrorMessage) GetSeverity() SeverityEnum {
	if o == nil || IsNil(o.Severity) {
		var ret SeverityEnum
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorMessage) GetSeverityOk() (*SeverityEnum, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *ErrorMessage) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given SeverityEnum and assigns it to the Severity field.
func (o *ErrorMessage) SetSeverity(v SeverityEnum) {
	o.Severity = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorMessage) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorMessage) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorMessage) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorMessage) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorMessage) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorMessage) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorMessage) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorMessage) SetMessage(v string) {
	o.Message = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ErrorMessage) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ErrorMessage) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *ErrorMessage) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetMessageL10n returns the MessageL10n field value if set, zero value otherwise.
func (o *ErrorMessage) GetMessageL10n() string {
	if o == nil || IsNil(o.MessageL10n) {
		var ret string
		return ret
	}
	return *o.MessageL10n
}

// GetMessageL10nOk returns a tuple with the MessageL10n field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorMessage) GetMessageL10nOk() (*string, bool) {
	if o == nil || IsNil(o.MessageL10n) {
		return nil, false
	}
	return o.MessageL10n, true
}

// HasMessageL10n returns a boolean if a field has been set.
func (o *ErrorMessage) HasMessageL10n() bool {
	if o != nil && !IsNil(o.MessageL10n) {
		return true
	}

	return false
}

// SetMessageL10n gets a reference to the given string and assigns it to the MessageL10n field.
func (o *ErrorMessage) SetMessageL10n(v string) {
	o.MessageL10n = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *ErrorMessage) GetArguments() []string {
	if o == nil || IsNil(o.Arguments) {
		var ret []string
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorMessage) GetArgumentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *ErrorMessage) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []string and assigns it to the Arguments field.
func (o *ErrorMessage) SetArguments(v []string) {
	o.Arguments = v
}

func (o ErrorMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.MessageL10n) {
		toSerialize["message_l10n"] = o.MessageL10n
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	return toSerialize, nil
}

type NullableErrorMessage struct {
	value *ErrorMessage
	isSet bool
}

func (v NullableErrorMessage) Get() *ErrorMessage {
	return v.value
}

func (v *NullableErrorMessage) Set(val *ErrorMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorMessage(val *ErrorMessage) *NullableErrorMessage {
	return &NullableErrorMessage{value: val, isSet: true}
}

func (v NullableErrorMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


