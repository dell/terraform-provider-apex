/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TierEnum Enum for all the supported tier for given storage product. * BALANCED * PERFORMANCE_OPTIMIZED 
type TierEnum string

// List of TierEnum
const (
	TIERENUM_BALANCED TierEnum = "BALANCED"
	TIERENUM_PERFORMANCE_OPTIMIZED TierEnum = "PERFORMANCE_OPTIMIZED"
)

// All allowed values of TierEnum enum
var AllowedTierEnumEnumValues = []TierEnum{
	"BALANCED",
	"PERFORMANCE_OPTIMIZED",
}

func (v *TierEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TierEnum(value)
	for _, existing := range AllowedTierEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TierEnum", value)
}

// NewTierEnumFromValue returns a pointer to a valid TierEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTierEnumFromValue(v string) (*TierEnum, error) {
	ev := TierEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TierEnum: valid values are %v", v, AllowedTierEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TierEnum) IsValid() bool {
	for _, existing := range AllowedTierEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TierEnum value
func (v TierEnum) Ptr() *TierEnum {
	return &v
}

type NullableTierEnum struct {
	value *TierEnum
	isSet bool
}

func (v NullableTierEnum) Get() *TierEnum {
	return v.value
}

func (v *NullableTierEnum) Set(val *TierEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTierEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTierEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierEnum(val *TierEnum) *NullableTierEnum {
	return &NullableTierEnum{value: val, isSet: true}
}

func (v NullableTierEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

