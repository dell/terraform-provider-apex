/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AwsTrustPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsTrustPolicy{}

// AwsTrustPolicy A trust policy is generated when a user is setting up a APEX Navigator for Multicloud Storage role. When attached to the APEX Navigator for Multicloud Storage role, it grants trust to an AWS principal owned by APEX Navigator for Multicloud Storage.
type AwsTrustPolicy struct {
	Version *string `json:"Version,omitempty"`
	Statement []AwsTrustPolicyStatementInner `json:"Statement,omitempty"`
}

// NewAwsTrustPolicy instantiates a new AwsTrustPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsTrustPolicy() *AwsTrustPolicy {
	this := AwsTrustPolicy{}
	return &this
}

// NewAwsTrustPolicyWithDefaults instantiates a new AwsTrustPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsTrustPolicyWithDefaults() *AwsTrustPolicy {
	this := AwsTrustPolicy{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AwsTrustPolicy) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsTrustPolicy) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AwsTrustPolicy) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AwsTrustPolicy) SetVersion(v string) {
	o.Version = &v
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *AwsTrustPolicy) GetStatement() []AwsTrustPolicyStatementInner {
	if o == nil || IsNil(o.Statement) {
		var ret []AwsTrustPolicyStatementInner
		return ret
	}
	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsTrustPolicy) GetStatementOk() ([]AwsTrustPolicyStatementInner, bool) {
	if o == nil || IsNil(o.Statement) {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *AwsTrustPolicy) HasStatement() bool {
	if o != nil && !IsNil(o.Statement) {
		return true
	}

	return false
}

// SetStatement gets a reference to the given []AwsTrustPolicyStatementInner and assigns it to the Statement field.
func (o *AwsTrustPolicy) SetStatement(v []AwsTrustPolicyStatementInner) {
	o.Statement = v
}

func (o AwsTrustPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsTrustPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.Statement) {
		toSerialize["Statement"] = o.Statement
	}
	return toSerialize, nil
}

type NullableAwsTrustPolicy struct {
	value *AwsTrustPolicy
	isSet bool
}

func (v NullableAwsTrustPolicy) Get() *AwsTrustPolicy {
	return v.value
}

func (v *NullableAwsTrustPolicy) Set(val *AwsTrustPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsTrustPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsTrustPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsTrustPolicy(val *AwsTrustPolicy) *NullableAwsTrustPolicy {
	return &NullableAwsTrustPolicy{value: val, isSet: true}
}

func (v NullableAwsTrustPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsTrustPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


