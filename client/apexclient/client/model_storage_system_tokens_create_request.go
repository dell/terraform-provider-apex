/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageSystemTokensCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSystemTokensCreateRequest{}

// StorageSystemTokensCreateRequest Storage system tokens create request
type StorageSystemTokensCreateRequest struct {
	SystemType StorageProductEnum `json:"system_type"`
	// Unique identifier for the storage system.
	SystemId string `json:"system_id"`
	// Access token of the system.
	AccessToken string `json:"access_token"`
}

type _StorageSystemTokensCreateRequest StorageSystemTokensCreateRequest

// NewStorageSystemTokensCreateRequest instantiates a new StorageSystemTokensCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSystemTokensCreateRequest(systemType StorageProductEnum, systemId string, accessToken string) *StorageSystemTokensCreateRequest {
	this := StorageSystemTokensCreateRequest{}
	this.SystemType = systemType
	this.SystemId = systemId
	this.AccessToken = accessToken
	return &this
}

// NewStorageSystemTokensCreateRequestWithDefaults instantiates a new StorageSystemTokensCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSystemTokensCreateRequestWithDefaults() *StorageSystemTokensCreateRequest {
	this := StorageSystemTokensCreateRequest{}
	return &this
}

// GetSystemType returns the SystemType field value
func (o *StorageSystemTokensCreateRequest) GetSystemType() StorageProductEnum {
	if o == nil {
		var ret StorageProductEnum
		return ret
	}

	return o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value
// and a boolean to check if the value has been set.
func (o *StorageSystemTokensCreateRequest) GetSystemTypeOk() (*StorageProductEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemType, true
}

// SetSystemType sets field value
func (o *StorageSystemTokensCreateRequest) SetSystemType(v StorageProductEnum) {
	o.SystemType = v
}

// GetSystemId returns the SystemId field value
func (o *StorageSystemTokensCreateRequest) GetSystemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *StorageSystemTokensCreateRequest) GetSystemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *StorageSystemTokensCreateRequest) SetSystemId(v string) {
	o.SystemId = v
}

// GetAccessToken returns the AccessToken field value
func (o *StorageSystemTokensCreateRequest) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *StorageSystemTokensCreateRequest) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *StorageSystemTokensCreateRequest) SetAccessToken(v string) {
	o.AccessToken = v
}

func (o StorageSystemTokensCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSystemTokensCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["system_type"] = o.SystemType
	toSerialize["system_id"] = o.SystemId
	toSerialize["access_token"] = o.AccessToken
	return toSerialize, nil
}

func (o *StorageSystemTokensCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"system_type",
		"system_id",
		"access_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageSystemTokensCreateRequest := _StorageSystemTokensCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageSystemTokensCreateRequest)

	if err != nil {
		return err
	}

	*o = StorageSystemTokensCreateRequest(varStorageSystemTokensCreateRequest)

	return err
}

type NullableStorageSystemTokensCreateRequest struct {
	value *StorageSystemTokensCreateRequest
	isSet bool
}

func (v NullableStorageSystemTokensCreateRequest) Get() *StorageSystemTokensCreateRequest {
	return v.value
}

func (v *NullableStorageSystemTokensCreateRequest) Set(val *StorageSystemTokensCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSystemTokensCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSystemTokensCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSystemTokensCreateRequest(val *StorageSystemTokensCreateRequest) *NullableStorageSystemTokensCreateRequest {
	return &NullableStorageSystemTokensCreateRequest{value: val, isSet: true}
}

func (v NullableStorageSystemTokensCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSystemTokensCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


