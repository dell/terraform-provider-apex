/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// LicensesCapacityUnitsEnum Valid values of license capacity_units attribute. * COUNT - A specific quantity limit. * PERCENT - A percentage value in the 0-100 range. * REQUEST_P_MIN - Requests per minute. * BYTE - Bytes of data. * BYTE_P_SEC- Bytes per second of throughput. * IO_P_SEC - IOs per second of throughput. 
type LicensesCapacityUnitsEnum string

// List of LicensesCapacityUnitsEnum
const (
	LICENSESCAPACITYUNITSENUM_COUNT LicensesCapacityUnitsEnum = "COUNT"
	LICENSESCAPACITYUNITSENUM_PERCENT LicensesCapacityUnitsEnum = "PERCENT"
	LICENSESCAPACITYUNITSENUM_REQUEST_P_MIN LicensesCapacityUnitsEnum = "REQUEST_P_MIN"
	LICENSESCAPACITYUNITSENUM_BYTE LicensesCapacityUnitsEnum = "BYTE"
	LICENSESCAPACITYUNITSENUM_BYTE_P_SEC LicensesCapacityUnitsEnum = "BYTE_P_SEC"
	LICENSESCAPACITYUNITSENUM_IO_P_SEC LicensesCapacityUnitsEnum = "IO_P_SEC"
)

// All allowed values of LicensesCapacityUnitsEnum enum
var AllowedLicensesCapacityUnitsEnumEnumValues = []LicensesCapacityUnitsEnum{
	"COUNT",
	"PERCENT",
	"REQUEST_P_MIN",
	"BYTE",
	"BYTE_P_SEC",
	"IO_P_SEC",
}

func (v *LicensesCapacityUnitsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LicensesCapacityUnitsEnum(value)
	for _, existing := range AllowedLicensesCapacityUnitsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LicensesCapacityUnitsEnum", value)
}

// NewLicensesCapacityUnitsEnumFromValue returns a pointer to a valid LicensesCapacityUnitsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicensesCapacityUnitsEnumFromValue(v string) (*LicensesCapacityUnitsEnum, error) {
	ev := LicensesCapacityUnitsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LicensesCapacityUnitsEnum: valid values are %v", v, AllowedLicensesCapacityUnitsEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicensesCapacityUnitsEnum) IsValid() bool {
	for _, existing := range AllowedLicensesCapacityUnitsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LicensesCapacityUnitsEnum value
func (v LicensesCapacityUnitsEnum) Ptr() *LicensesCapacityUnitsEnum {
	return &v
}

type NullableLicensesCapacityUnitsEnum struct {
	value *LicensesCapacityUnitsEnum
	isSet bool
}

func (v NullableLicensesCapacityUnitsEnum) Get() *LicensesCapacityUnitsEnum {
	return v.value
}

func (v *NullableLicensesCapacityUnitsEnum) Set(val *LicensesCapacityUnitsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensesCapacityUnitsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensesCapacityUnitsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensesCapacityUnitsEnum(val *LicensesCapacityUnitsEnum) *NullableLicensesCapacityUnitsEnum {
	return &NullableLicensesCapacityUnitsEnum{value: val, isSet: true}
}

func (v NullableLicensesCapacityUnitsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensesCapacityUnitsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

