/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TierOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TierOption{}

// TierOption This model represents the tier option for a offer template
type TierOption struct {
	Id string `json:"id"`
	// Unique key for tier option
	Key string `json:"key"`
	// Order of the option selection
	Order int32 `json:"order"`
	Value TierOptionValue `json:"value"`
}

type _TierOption TierOption

// NewTierOption instantiates a new TierOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTierOption(id string, key string, order int32, value TierOptionValue) *TierOption {
	this := TierOption{}
	this.Id = id
	this.Key = key
	this.Order = order
	this.Value = value
	return &this
}

// NewTierOptionWithDefaults instantiates a new TierOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTierOptionWithDefaults() *TierOption {
	this := TierOption{}
	return &this
}

// GetId returns the Id field value
func (o *TierOption) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TierOption) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TierOption) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *TierOption) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TierOption) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TierOption) SetKey(v string) {
	o.Key = v
}

// GetOrder returns the Order field value
func (o *TierOption) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *TierOption) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *TierOption) SetOrder(v int32) {
	o.Order = v
}

// GetValue returns the Value field value
func (o *TierOption) GetValue() TierOptionValue {
	if o == nil {
		var ret TierOptionValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TierOption) GetValueOk() (*TierOptionValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TierOption) SetValue(v TierOptionValue) {
	o.Value = v
}

func (o TierOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TierOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	toSerialize["order"] = o.Order
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *TierOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"key",
		"order",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTierOption := _TierOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTierOption)

	if err != nil {
		return err
	}

	*o = TierOption(varTierOption)

	return err
}

type NullableTierOption struct {
	value *TierOption
	isSet bool
}

func (v NullableTierOption) Get() *TierOption {
	return v.value
}

func (v *NullableTierOption) Set(val *TierOption) {
	v.value = val
	v.isSet = true
}

func (v NullableTierOption) IsSet() bool {
	return v.isSet
}

func (v *NullableTierOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierOption(val *TierOption) *NullableTierOption {
	return &NullableTierOption{value: val, isSet: true}
}

func (v NullableTierOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


