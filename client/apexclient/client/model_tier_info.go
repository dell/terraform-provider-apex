/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TierInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TierInfo{}

// TierInfo This model represents the tier info for a storage template
type TierInfo struct {
	Id string `json:"id"`
	// Tier name
	Name string `json:"name"`
	TierType TierEnum `json:"tier_type"`
	// Description of the tier
	Description string `json:"description"`
	// Supported storage options for a tier
	StorageOptions []TierOption `json:"storage_options"`
	// Supported cloud options for a tier
	CloudOptions []TierOption `json:"cloud_options"`
}

type _TierInfo TierInfo

// NewTierInfo instantiates a new TierInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTierInfo(id string, name string, tierType TierEnum, description string, storageOptions []TierOption, cloudOptions []TierOption) *TierInfo {
	this := TierInfo{}
	this.Id = id
	this.Name = name
	this.TierType = tierType
	this.Description = description
	this.StorageOptions = storageOptions
	this.CloudOptions = cloudOptions
	return &this
}

// NewTierInfoWithDefaults instantiates a new TierInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTierInfoWithDefaults() *TierInfo {
	this := TierInfo{}
	return &this
}

// GetId returns the Id field value
func (o *TierInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TierInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TierInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TierInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TierInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TierInfo) SetName(v string) {
	o.Name = v
}

// GetTierType returns the TierType field value
func (o *TierInfo) GetTierType() TierEnum {
	if o == nil {
		var ret TierEnum
		return ret
	}

	return o.TierType
}

// GetTierTypeOk returns a tuple with the TierType field value
// and a boolean to check if the value has been set.
func (o *TierInfo) GetTierTypeOk() (*TierEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TierType, true
}

// SetTierType sets field value
func (o *TierInfo) SetTierType(v TierEnum) {
	o.TierType = v
}

// GetDescription returns the Description field value
func (o *TierInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TierInfo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TierInfo) SetDescription(v string) {
	o.Description = v
}

// GetStorageOptions returns the StorageOptions field value
func (o *TierInfo) GetStorageOptions() []TierOption {
	if o == nil {
		var ret []TierOption
		return ret
	}

	return o.StorageOptions
}

// GetStorageOptionsOk returns a tuple with the StorageOptions field value
// and a boolean to check if the value has been set.
func (o *TierInfo) GetStorageOptionsOk() ([]TierOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageOptions, true
}

// SetStorageOptions sets field value
func (o *TierInfo) SetStorageOptions(v []TierOption) {
	o.StorageOptions = v
}

// GetCloudOptions returns the CloudOptions field value
func (o *TierInfo) GetCloudOptions() []TierOption {
	if o == nil {
		var ret []TierOption
		return ret
	}

	return o.CloudOptions
}

// GetCloudOptionsOk returns a tuple with the CloudOptions field value
// and a boolean to check if the value has been set.
func (o *TierInfo) GetCloudOptionsOk() ([]TierOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudOptions, true
}

// SetCloudOptions sets field value
func (o *TierInfo) SetCloudOptions(v []TierOption) {
	o.CloudOptions = v
}

func (o TierInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TierInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["tier_type"] = o.TierType
	toSerialize["description"] = o.Description
	toSerialize["storage_options"] = o.StorageOptions
	toSerialize["cloud_options"] = o.CloudOptions
	return toSerialize, nil
}

func (o *TierInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"tier_type",
		"description",
		"storage_options",
		"cloud_options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTierInfo := _TierInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTierInfo)

	if err != nil {
		return err
	}

	*o = TierInfo(varTierInfo)

	return err
}

type NullableTierInfo struct {
	value *TierInfo
	isSet bool
}

func (v NullableTierInfo) Get() *TierInfo {
	return v.value
}

func (v *NullableTierInfo) Set(val *TierInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTierInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTierInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierInfo(val *TierInfo) *NullableTierInfo {
	return &NullableTierInfo{value: val, isSet: true}
}

func (v NullableTierInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


