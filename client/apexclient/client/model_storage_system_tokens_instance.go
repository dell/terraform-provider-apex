/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StorageSystemTokensInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSystemTokensInstance{}

// StorageSystemTokensInstance The Storage System Tokens Instance response.
type StorageSystemTokensInstance struct {
	SystemType StorageSystemTypeEnum `json:"system_type"`
	// Unique identifier for the storage system.
	SystemId string `json:"system_id"`
	// Expiration date for the token of the storage system.
	ExpirationTimestamp time.Time `json:"expiration_timestamp"`
	IsTokenValid bool `json:"is_token_valid"`
}

type _StorageSystemTokensInstance StorageSystemTokensInstance

// NewStorageSystemTokensInstance instantiates a new StorageSystemTokensInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSystemTokensInstance(systemType StorageSystemTypeEnum, systemId string, expirationTimestamp time.Time, isTokenValid bool) *StorageSystemTokensInstance {
	this := StorageSystemTokensInstance{}
	this.SystemType = systemType
	this.SystemId = systemId
	this.ExpirationTimestamp = expirationTimestamp
	this.IsTokenValid = isTokenValid
	return &this
}

// NewStorageSystemTokensInstanceWithDefaults instantiates a new StorageSystemTokensInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSystemTokensInstanceWithDefaults() *StorageSystemTokensInstance {
	this := StorageSystemTokensInstance{}
	return &this
}

// GetSystemType returns the SystemType field value
func (o *StorageSystemTokensInstance) GetSystemType() StorageSystemTypeEnum {
	if o == nil {
		var ret StorageSystemTypeEnum
		return ret
	}

	return o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value
// and a boolean to check if the value has been set.
func (o *StorageSystemTokensInstance) GetSystemTypeOk() (*StorageSystemTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemType, true
}

// SetSystemType sets field value
func (o *StorageSystemTokensInstance) SetSystemType(v StorageSystemTypeEnum) {
	o.SystemType = v
}

// GetSystemId returns the SystemId field value
func (o *StorageSystemTokensInstance) GetSystemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value
// and a boolean to check if the value has been set.
func (o *StorageSystemTokensInstance) GetSystemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemId, true
}

// SetSystemId sets field value
func (o *StorageSystemTokensInstance) SetSystemId(v string) {
	o.SystemId = v
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value
func (o *StorageSystemTokensInstance) GetExpirationTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value
// and a boolean to check if the value has been set.
func (o *StorageSystemTokensInstance) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationTimestamp, true
}

// SetExpirationTimestamp sets field value
func (o *StorageSystemTokensInstance) SetExpirationTimestamp(v time.Time) {
	o.ExpirationTimestamp = v
}

// GetIsTokenValid returns the IsTokenValid field value
func (o *StorageSystemTokensInstance) GetIsTokenValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTokenValid
}

// GetIsTokenValidOk returns a tuple with the IsTokenValid field value
// and a boolean to check if the value has been set.
func (o *StorageSystemTokensInstance) GetIsTokenValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTokenValid, true
}

// SetIsTokenValid sets field value
func (o *StorageSystemTokensInstance) SetIsTokenValid(v bool) {
	o.IsTokenValid = v
}

func (o StorageSystemTokensInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSystemTokensInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["system_type"] = o.SystemType
	toSerialize["system_id"] = o.SystemId
	toSerialize["expiration_timestamp"] = o.ExpirationTimestamp
	toSerialize["is_token_valid"] = o.IsTokenValid
	return toSerialize, nil
}

func (o *StorageSystemTokensInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"system_type",
		"system_id",
		"expiration_timestamp",
		"is_token_valid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageSystemTokensInstance := _StorageSystemTokensInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageSystemTokensInstance)

	if err != nil {
		return err
	}

	*o = StorageSystemTokensInstance(varStorageSystemTokensInstance)

	return err
}

type NullableStorageSystemTokensInstance struct {
	value *StorageSystemTokensInstance
	isSet bool
}

func (v NullableStorageSystemTokensInstance) Get() *StorageSystemTokensInstance {
	return v.value
}

func (v *NullableStorageSystemTokensInstance) Set(val *StorageSystemTokensInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSystemTokensInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSystemTokensInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSystemTokensInstance(val *StorageSystemTokensInstance) *NullableStorageSystemTokensInstance {
	return &NullableStorageSystemTokensInstance{value: val, isSet: true}
}

func (v NullableStorageSystemTokensInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSystemTokensInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


