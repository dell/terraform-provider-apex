/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// HostInitiatorProtocolEnum Type of the host
type HostInitiatorProtocolEnum string

// List of HostInitiatorProtocolEnum
const (
	HOSTINITIATORPROTOCOLENUM_NVME HostInitiatorProtocolEnum = "NVMe"
	HOSTINITIATORPROTOCOLENUM_SDC HostInitiatorProtocolEnum = "SDC"
)

// All allowed values of HostInitiatorProtocolEnum enum
var AllowedHostInitiatorProtocolEnumEnumValues = []HostInitiatorProtocolEnum{
	"NVMe",
	"SDC",
}

func (v *HostInitiatorProtocolEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostInitiatorProtocolEnum(value)
	for _, existing := range AllowedHostInitiatorProtocolEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostInitiatorProtocolEnum", value)
}

// NewHostInitiatorProtocolEnumFromValue returns a pointer to a valid HostInitiatorProtocolEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostInitiatorProtocolEnumFromValue(v string) (*HostInitiatorProtocolEnum, error) {
	ev := HostInitiatorProtocolEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostInitiatorProtocolEnum: valid values are %v", v, AllowedHostInitiatorProtocolEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostInitiatorProtocolEnum) IsValid() bool {
	for _, existing := range AllowedHostInitiatorProtocolEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostInitiatorProtocolEnum value
func (v HostInitiatorProtocolEnum) Ptr() *HostInitiatorProtocolEnum {
	return &v
}

type NullableHostInitiatorProtocolEnum struct {
	value *HostInitiatorProtocolEnum
	isSet bool
}

func (v NullableHostInitiatorProtocolEnum) Get() *HostInitiatorProtocolEnum {
	return v.value
}

func (v *NullableHostInitiatorProtocolEnum) Set(val *HostInitiatorProtocolEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHostInitiatorProtocolEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHostInitiatorProtocolEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostInitiatorProtocolEnum(val *HostInitiatorProtocolEnum) *NullableHostInitiatorProtocolEnum {
	return &NullableHostInitiatorProtocolEnum{value: val, isSet: true}
}

func (v NullableHostInitiatorProtocolEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostInitiatorProtocolEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

