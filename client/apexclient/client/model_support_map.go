/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupportMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportMap{}

// SupportMap This model shows the cloud support mapping, all supported storage product versions, supported actions, and the latest supported version.
type SupportMap struct {
	Id string `json:"id"`
	// Evaluation period in days. After the evaluation period is expired, you need to purchase a license from Dell, to continue the use the product.
	SupportedEvaluationPeriod int32 `json:"supported_evaluation_period"`
	// Version of the storage product on the cloud
	Version string `json:"version"`
	// Part group of PowerFlex
	PartGroup *string `json:"part_group,omitempty"`
	// All the supported actions for the storage products version
	SupportedActions []StorageProductActionEnum `json:"supported_actions"`
}

type _SupportMap SupportMap

// NewSupportMap instantiates a new SupportMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportMap(id string, supportedEvaluationPeriod int32, version string, supportedActions []StorageProductActionEnum) *SupportMap {
	this := SupportMap{}
	this.Id = id
	this.SupportedEvaluationPeriod = supportedEvaluationPeriod
	this.Version = version
	this.SupportedActions = supportedActions
	return &this
}

// NewSupportMapWithDefaults instantiates a new SupportMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportMapWithDefaults() *SupportMap {
	this := SupportMap{}
	return &this
}

// GetId returns the Id field value
func (o *SupportMap) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SupportMap) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SupportMap) SetId(v string) {
	o.Id = v
}

// GetSupportedEvaluationPeriod returns the SupportedEvaluationPeriod field value
func (o *SupportMap) GetSupportedEvaluationPeriod() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SupportedEvaluationPeriod
}

// GetSupportedEvaluationPeriodOk returns a tuple with the SupportedEvaluationPeriod field value
// and a boolean to check if the value has been set.
func (o *SupportMap) GetSupportedEvaluationPeriodOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportedEvaluationPeriod, true
}

// SetSupportedEvaluationPeriod sets field value
func (o *SupportMap) SetSupportedEvaluationPeriod(v int32) {
	o.SupportedEvaluationPeriod = v
}

// GetVersion returns the Version field value
func (o *SupportMap) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SupportMap) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SupportMap) SetVersion(v string) {
	o.Version = v
}

// GetPartGroup returns the PartGroup field value if set, zero value otherwise.
func (o *SupportMap) GetPartGroup() string {
	if o == nil || IsNil(o.PartGroup) {
		var ret string
		return ret
	}
	return *o.PartGroup
}

// GetPartGroupOk returns a tuple with the PartGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportMap) GetPartGroupOk() (*string, bool) {
	if o == nil || IsNil(o.PartGroup) {
		return nil, false
	}
	return o.PartGroup, true
}

// HasPartGroup returns a boolean if a field has been set.
func (o *SupportMap) HasPartGroup() bool {
	if o != nil && !IsNil(o.PartGroup) {
		return true
	}

	return false
}

// SetPartGroup gets a reference to the given string and assigns it to the PartGroup field.
func (o *SupportMap) SetPartGroup(v string) {
	o.PartGroup = &v
}

// GetSupportedActions returns the SupportedActions field value
func (o *SupportMap) GetSupportedActions() []StorageProductActionEnum {
	if o == nil {
		var ret []StorageProductActionEnum
		return ret
	}

	return o.SupportedActions
}

// GetSupportedActionsOk returns a tuple with the SupportedActions field value
// and a boolean to check if the value has been set.
func (o *SupportMap) GetSupportedActionsOk() ([]StorageProductActionEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedActions, true
}

// SetSupportedActions sets field value
func (o *SupportMap) SetSupportedActions(v []StorageProductActionEnum) {
	o.SupportedActions = v
}

func (o SupportMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["supported_evaluation_period"] = o.SupportedEvaluationPeriod
	toSerialize["version"] = o.Version
	if !IsNil(o.PartGroup) {
		toSerialize["part_group"] = o.PartGroup
	}
	toSerialize["supported_actions"] = o.SupportedActions
	return toSerialize, nil
}

func (o *SupportMap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"supported_evaluation_period",
		"version",
		"supported_actions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupportMap := _SupportMap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupportMap)

	if err != nil {
		return err
	}

	*o = SupportMap(varSupportMap)

	return err
}

type NullableSupportMap struct {
	value *SupportMap
	isSet bool
}

func (v NullableSupportMap) Get() *SupportMap {
	return v.value
}

func (v *NullableSupportMap) Set(val *SupportMap) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportMap) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportMap(val *SupportMap) *NullableSupportMap {
	return &NullableSupportMap{value: val, isSet: true}
}

func (v NullableSupportMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


