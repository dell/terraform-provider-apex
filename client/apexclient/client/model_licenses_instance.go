/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the LicensesInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicensesInstance{}

// LicensesInstance Properties of a licenses instance.
type LicensesInstance struct {
	// Unique identifier of a licenses resource.
	Id *string `json:"id,omitempty"`
	// The name of the license.
	Name *string `json:"name,omitempty"`
	Type *LicensesTypeEnum `json:"type,omitempty"`
	// The time at which the license began. 
	StartTime *time.Time `json:"start_time,omitempty"`
	ExpirationType *LicensesExpirationTypeEnum `json:"expiration_type,omitempty"`
	// For a TRIAL, EXT_TRIAL, TIME_LIMITED, GRACE_PERIOD, or RESTRICTED expiration type license, the time at which the license will expire. 
	ExpirationTime *time.Time `json:"expiration_time,omitempty"`
	// For a CAPACITY type license, the limit on the license. 
	Capacity *int64 `json:"capacity,omitempty"`
	CapacityUnits *LicensesCapacityUnitsEnum `json:"capacity_units,omitempty"`
	// For licenses derived from ELMS entitlements, the entitlement from which this license was activated. 
	EntitlementId *string `json:"entitlement_id,omitempty"`
	// The system on which this license is activated. 
	SystemId *string `json:"system_id,omitempty"`
}

// NewLicensesInstance instantiates a new LicensesInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicensesInstance() *LicensesInstance {
	this := LicensesInstance{}
	var capacityUnits LicensesCapacityUnitsEnum = LICENSESCAPACITYUNITSENUM_COUNT
	this.CapacityUnits = &capacityUnits
	return &this
}

// NewLicensesInstanceWithDefaults instantiates a new LicensesInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicensesInstanceWithDefaults() *LicensesInstance {
	this := LicensesInstance{}
	var capacityUnits LicensesCapacityUnitsEnum = LICENSESCAPACITYUNITSENUM_COUNT
	this.CapacityUnits = &capacityUnits
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LicensesInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LicensesInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LicensesInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicensesInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicensesInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicensesInstance) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LicensesInstance) GetType() LicensesTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret LicensesTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetTypeOk() (*LicensesTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LicensesInstance) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given LicensesTypeEnum and assigns it to the Type field.
func (o *LicensesInstance) SetType(v LicensesTypeEnum) {
	o.Type = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *LicensesInstance) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *LicensesInstance) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *LicensesInstance) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetExpirationType returns the ExpirationType field value if set, zero value otherwise.
func (o *LicensesInstance) GetExpirationType() LicensesExpirationTypeEnum {
	if o == nil || IsNil(o.ExpirationType) {
		var ret LicensesExpirationTypeEnum
		return ret
	}
	return *o.ExpirationType
}

// GetExpirationTypeOk returns a tuple with the ExpirationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetExpirationTypeOk() (*LicensesExpirationTypeEnum, bool) {
	if o == nil || IsNil(o.ExpirationType) {
		return nil, false
	}
	return o.ExpirationType, true
}

// HasExpirationType returns a boolean if a field has been set.
func (o *LicensesInstance) HasExpirationType() bool {
	if o != nil && !IsNil(o.ExpirationType) {
		return true
	}

	return false
}

// SetExpirationType gets a reference to the given LicensesExpirationTypeEnum and assigns it to the ExpirationType field.
func (o *LicensesInstance) SetExpirationType(v LicensesExpirationTypeEnum) {
	o.ExpirationType = &v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *LicensesInstance) GetExpirationTime() time.Time {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetExpirationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *LicensesInstance) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given time.Time and assigns it to the ExpirationTime field.
func (o *LicensesInstance) SetExpirationTime(v time.Time) {
	o.ExpirationTime = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *LicensesInstance) GetCapacity() int64 {
	if o == nil || IsNil(o.Capacity) {
		var ret int64
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *LicensesInstance) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int64 and assigns it to the Capacity field.
func (o *LicensesInstance) SetCapacity(v int64) {
	o.Capacity = &v
}

// GetCapacityUnits returns the CapacityUnits field value if set, zero value otherwise.
func (o *LicensesInstance) GetCapacityUnits() LicensesCapacityUnitsEnum {
	if o == nil || IsNil(o.CapacityUnits) {
		var ret LicensesCapacityUnitsEnum
		return ret
	}
	return *o.CapacityUnits
}

// GetCapacityUnitsOk returns a tuple with the CapacityUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetCapacityUnitsOk() (*LicensesCapacityUnitsEnum, bool) {
	if o == nil || IsNil(o.CapacityUnits) {
		return nil, false
	}
	return o.CapacityUnits, true
}

// HasCapacityUnits returns a boolean if a field has been set.
func (o *LicensesInstance) HasCapacityUnits() bool {
	if o != nil && !IsNil(o.CapacityUnits) {
		return true
	}

	return false
}

// SetCapacityUnits gets a reference to the given LicensesCapacityUnitsEnum and assigns it to the CapacityUnits field.
func (o *LicensesInstance) SetCapacityUnits(v LicensesCapacityUnitsEnum) {
	o.CapacityUnits = &v
}

// GetEntitlementId returns the EntitlementId field value if set, zero value otherwise.
func (o *LicensesInstance) GetEntitlementId() string {
	if o == nil || IsNil(o.EntitlementId) {
		var ret string
		return ret
	}
	return *o.EntitlementId
}

// GetEntitlementIdOk returns a tuple with the EntitlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetEntitlementIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementId) {
		return nil, false
	}
	return o.EntitlementId, true
}

// HasEntitlementId returns a boolean if a field has been set.
func (o *LicensesInstance) HasEntitlementId() bool {
	if o != nil && !IsNil(o.EntitlementId) {
		return true
	}

	return false
}

// SetEntitlementId gets a reference to the given string and assigns it to the EntitlementId field.
func (o *LicensesInstance) SetEntitlementId(v string) {
	o.EntitlementId = &v
}

// GetSystemId returns the SystemId field value if set, zero value otherwise.
func (o *LicensesInstance) GetSystemId() string {
	if o == nil || IsNil(o.SystemId) {
		var ret string
		return ret
	}
	return *o.SystemId
}

// GetSystemIdOk returns a tuple with the SystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesInstance) GetSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SystemId) {
		return nil, false
	}
	return o.SystemId, true
}

// HasSystemId returns a boolean if a field has been set.
func (o *LicensesInstance) HasSystemId() bool {
	if o != nil && !IsNil(o.SystemId) {
		return true
	}

	return false
}

// SetSystemId gets a reference to the given string and assigns it to the SystemId field.
func (o *LicensesInstance) SetSystemId(v string) {
	o.SystemId = &v
}

func (o LicensesInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicensesInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.ExpirationType) {
		toSerialize["expiration_type"] = o.ExpirationType
	}
	if !IsNil(o.ExpirationTime) {
		toSerialize["expiration_time"] = o.ExpirationTime
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.CapacityUnits) {
		toSerialize["capacity_units"] = o.CapacityUnits
	}
	if !IsNil(o.EntitlementId) {
		toSerialize["entitlement_id"] = o.EntitlementId
	}
	if !IsNil(o.SystemId) {
		toSerialize["system_id"] = o.SystemId
	}
	return toSerialize, nil
}

type NullableLicensesInstance struct {
	value *LicensesInstance
	isSet bool
}

func (v NullableLicensesInstance) Get() *LicensesInstance {
	return v.value
}

func (v *NullableLicensesInstance) Set(val *LicensesInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensesInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensesInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensesInstance(val *LicensesInstance) *NullableLicensesInstance {
	return &NullableLicensesInstance{value: val, isSet: true}
}

func (v NullableLicensesInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensesInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


