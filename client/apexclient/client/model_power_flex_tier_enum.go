/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// PowerFlexTierEnum Enum for all the supported tier for PowerFlex. * BALANCED * PERFORMANCE_OPTIMIZED 
type PowerFlexTierEnum string

// List of PowerFlexTierEnum
const (
	POWERFLEXTIERENUM_BALANCED PowerFlexTierEnum = "BALANCED"
	POWERFLEXTIERENUM_PERFORMANCE_OPTIMIZED PowerFlexTierEnum = "PERFORMANCE_OPTIMIZED"
)

// All allowed values of PowerFlexTierEnum enum
var AllowedPowerFlexTierEnumEnumValues = []PowerFlexTierEnum{
	"BALANCED",
	"PERFORMANCE_OPTIMIZED",
}

func (v *PowerFlexTierEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PowerFlexTierEnum(value)
	for _, existing := range AllowedPowerFlexTierEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PowerFlexTierEnum", value)
}

// NewPowerFlexTierEnumFromValue returns a pointer to a valid PowerFlexTierEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerFlexTierEnumFromValue(v string) (*PowerFlexTierEnum, error) {
	ev := PowerFlexTierEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PowerFlexTierEnum: valid values are %v", v, AllowedPowerFlexTierEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerFlexTierEnum) IsValid() bool {
	for _, existing := range AllowedPowerFlexTierEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PowerFlexTierEnum value
func (v PowerFlexTierEnum) Ptr() *PowerFlexTierEnum {
	return &v
}

type NullablePowerFlexTierEnum struct {
	value *PowerFlexTierEnum
	isSet bool
}

func (v NullablePowerFlexTierEnum) Get() *PowerFlexTierEnum {
	return v.value
}

func (v *NullablePowerFlexTierEnum) Set(val *PowerFlexTierEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerFlexTierEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerFlexTierEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerFlexTierEnum(val *PowerFlexTierEnum) *NullablePowerFlexTierEnum {
	return &NullablePowerFlexTierEnum{value: val, isSet: true}
}

func (v NullablePowerFlexTierEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerFlexTierEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

