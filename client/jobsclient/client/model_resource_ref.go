/*
APEX Orchestration Platform - Job Management System (JMS) API

Provides management and visibility for APEX Orchestration Platform Jobs

API version: IGNORED - see resource tag's x-api-version for the specific version of this resource.
Contact: apex.mars@dell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceRef{}

// ResourceRef A ResourceRef contains type and identifier information that is used to reference an instance of any resource. Type and id are required when a client is referring to a resource in a request, and type=OTHER_RESOURCE, name, and resource_url are not valid in that context. 
type ResourceRef struct {
	Type ResourceTypeEnum `json:"type"`
	// Unique identifier of the resource on which the job is operating.
	Id string `json:"id"`
	// The name of the referenced resource, if applicable. This is copied from the resource as a convenience for clients.
	Name *string `json:"name,omitempty"`
	// The URL of the referenced resource instance. For specific resource types in ResourceType enum, the URL will be of the form <base_uri>/<type>/<id>. When the type is OTHER_RESOURCE, the value can be any valid URI that resolves to the referenced resource.
	ResourceUrl *string `json:"resource_url,omitempty"`
}

type _ResourceRef ResourceRef

// NewResourceRef instantiates a new ResourceRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRef(type_ ResourceTypeEnum, id string) *ResourceRef {
	this := ResourceRef{}
	this.Type = type_
	this.Id = id
	return &this
}

// NewResourceRefWithDefaults instantiates a new ResourceRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRefWithDefaults() *ResourceRef {
	this := ResourceRef{}
	return &this
}

// GetType returns the Type field value
func (o *ResourceRef) GetType() ResourceTypeEnum {
	if o == nil {
		var ret ResourceTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetTypeOk() (*ResourceTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResourceRef) SetType(v ResourceTypeEnum) {
	o.Type = v
}

// GetId returns the Id field value
func (o *ResourceRef) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceRef) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceRef) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceRef) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceRef) SetName(v string) {
	o.Name = &v
}

// GetResourceUrl returns the ResourceUrl field value if set, zero value otherwise.
func (o *ResourceRef) GetResourceUrl() string {
	if o == nil || IsNil(o.ResourceUrl) {
		var ret string
		return ret
	}
	return *o.ResourceUrl
}

// GetResourceUrlOk returns a tuple with the ResourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRef) GetResourceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceUrl) {
		return nil, false
	}
	return o.ResourceUrl, true
}

// HasResourceUrl returns a boolean if a field has been set.
func (o *ResourceRef) HasResourceUrl() bool {
	if o != nil && !IsNil(o.ResourceUrl) {
		return true
	}

	return false
}

// SetResourceUrl gets a reference to the given string and assigns it to the ResourceUrl field.
func (o *ResourceRef) SetResourceUrl(v string) {
	o.ResourceUrl = &v
}

func (o ResourceRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ResourceUrl) {
		toSerialize["resource_url"] = o.ResourceUrl
	}
	return toSerialize, nil
}

func (o *ResourceRef) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceRef := _ResourceRef{}

	err = json.Unmarshal(bytes, &varResourceRef)

	if err != nil {
		return err
	}

	*o = ResourceRef(varResourceRef)

	return err
}

type NullableResourceRef struct {
	value *ResourceRef
	isSet bool
}

func (v NullableResourceRef) Get() *ResourceRef {
	return v.value
}

func (v *NullableResourceRef) Set(val *ResourceRef) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRef) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRef(val *ResourceRef) *NullableResourceRef {
	return &NullableResourceRef{value: val, isSet: true}
}

func (v NullableResourceRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


