/*
APEX Orchestration Platform - Job Management System (JMS) API

Provides management and visibility for APEX Orchestration Platform Jobs

API version: IGNORED - see resource tag's x-api-version for the specific version of this resource.
Contact: apex.mars@dell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// HTTPStatusEnum Possible HTTP status values of completed or failed jobs. * 200 - OK - Successful completion, with a response body. * 201 - Created - Successful completion of a create request (POST to collection resource). * 202 - Accepted - Job has been started. Response body is a job resource instance. Response status and body are available from job when it completes. * 204 - No Content - Successful completion, without a response body. * 206 - Partial Content - Paged response to a collection query. * 299 - Completed with Messages - Core request completed but has messages for client. Ancillary portions of request may have failed. Few requests should be able to return this, as the intent is for requests to be atomic - to either succeed or roll back on failure. * 400 - Invalid Request - The request is incorrect. To the extent possible, validate requests up front and use this code. Details in the response body. * 401 - Unauthorized - The request cannot be authenticated. * 403 - Forbidden - The request is not allowed for this client. * 404 - Not Found - The id value in the request URL is not valid. * 422 - Operation Failed - The request failed during execution. * 429 - Too Many Requests - This particular client needs to slow down and take it easy. Retry after a delay. * 500 - Internal Error - This means the product has a bug and customer should contact support. * 503 - Service Unavailable - The service is temporarily unavailable. Try again later. 
type HTTPStatusEnum int32

// List of HTTPStatusEnum
const (
	HTTPSTATUSENUM__200 HTTPStatusEnum = 200
	HTTPSTATUSENUM__201 HTTPStatusEnum = 201
	HTTPSTATUSENUM__202 HTTPStatusEnum = 202
	HTTPSTATUSENUM__204 HTTPStatusEnum = 204
	HTTPSTATUSENUM__206 HTTPStatusEnum = 206
	HTTPSTATUSENUM__299 HTTPStatusEnum = 299
	HTTPSTATUSENUM__400 HTTPStatusEnum = 400
	HTTPSTATUSENUM__401 HTTPStatusEnum = 401
	HTTPSTATUSENUM__403 HTTPStatusEnum = 403
	HTTPSTATUSENUM__404 HTTPStatusEnum = 404
	HTTPSTATUSENUM__422 HTTPStatusEnum = 422
	HTTPSTATUSENUM__429 HTTPStatusEnum = 429
	HTTPSTATUSENUM__500 HTTPStatusEnum = 500
	HTTPSTATUSENUM__503 HTTPStatusEnum = 503
)

// All allowed values of HTTPStatusEnum enum
var AllowedHTTPStatusEnumEnumValues = []HTTPStatusEnum{
	200,
	201,
	202,
	204,
	206,
	299,
	400,
	401,
	403,
	404,
	422,
	429,
	500,
	503,
}

func (v *HTTPStatusEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HTTPStatusEnum(value)
	for _, existing := range AllowedHTTPStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HTTPStatusEnum", value)
}

// NewHTTPStatusEnumFromValue returns a pointer to a valid HTTPStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHTTPStatusEnumFromValue(v int32) (*HTTPStatusEnum, error) {
	ev := HTTPStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HTTPStatusEnum: valid values are %v", v, AllowedHTTPStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HTTPStatusEnum) IsValid() bool {
	for _, existing := range AllowedHTTPStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HTTPStatusEnum value
func (v HTTPStatusEnum) Ptr() *HTTPStatusEnum {
	return &v
}

type NullableHTTPStatusEnum struct {
	value *HTTPStatusEnum
	isSet bool
}

func (v NullableHTTPStatusEnum) Get() *HTTPStatusEnum {
	return v.value
}

func (v *NullableHTTPStatusEnum) Set(val *HTTPStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPStatusEnum(val *HTTPStatusEnum) *NullableHTTPStatusEnum {
	return &NullableHTTPStatusEnum{value: val, isSet: true}
}

func (v NullableHTTPStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

