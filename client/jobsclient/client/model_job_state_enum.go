/*
APEX Orchestration Platform - Job Management System (JMS) API

Provides management and visibility for APEX Orchestration Platform Jobs

API version: IGNORED - see resource tag's x-api-version for the specific version of this resource.
Contact: apex.mars@dell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// JobStateEnum Current status of the job. * SCHEDULED - Waiting for start time. * QUEUED - Job is ready to run but waiting because too many other jobs are already running. * RUNNING - Job is in progress. * PAUSING - Job is attempting to pause. * PAUSED - Job is paused. * RESUMING - Job is attempting to resume. * CANCELLING - Job is attempting to cancel. * CANCELLED - Job is cancelled. * SUCCEEDED - Job has successfully completed. Status must be 200, 201, or 204. * COMPLETED_WITH_MESSAGES - Job has completed, but with only partial success. The status will be 299, and the   response body will be the standard ErrorResponse, extended as necessary fo any other response data    (such as the created instance in the case of a create operation in COMPLETED_WITH_MESSAGES state). * FAILED - Job has failed, and rolled back any configuration changes if possible. Status will be 4xx or 5xx. 
type JobStateEnum string

// List of JobStateEnum
const (
	JOBSTATEENUM_SCHEDULED JobStateEnum = "SCHEDULED"
	JOBSTATEENUM_QUEUED JobStateEnum = "QUEUED"
	JOBSTATEENUM_RUNNING JobStateEnum = "RUNNING"
	JOBSTATEENUM_PAUSING JobStateEnum = "PAUSING"
	JOBSTATEENUM_PAUSED JobStateEnum = "PAUSED"
	JOBSTATEENUM_RESUMING JobStateEnum = "RESUMING"
	JOBSTATEENUM_CANCELLING JobStateEnum = "CANCELLING"
	JOBSTATEENUM_CANCELLED JobStateEnum = "CANCELLED"
	JOBSTATEENUM_SUCCEEDED JobStateEnum = "SUCCEEDED"
	JOBSTATEENUM_COMPLETED_WITH_MESSAGES JobStateEnum = "COMPLETED_WITH_MESSAGES"
	JOBSTATEENUM_FAILED JobStateEnum = "FAILED"
)

// All allowed values of JobStateEnum enum
var AllowedJobStateEnumEnumValues = []JobStateEnum{
	"SCHEDULED",
	"QUEUED",
	"RUNNING",
	"PAUSING",
	"PAUSED",
	"RESUMING",
	"CANCELLING",
	"CANCELLED",
	"SUCCEEDED",
	"COMPLETED_WITH_MESSAGES",
	"FAILED",
}

func (v *JobStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobStateEnum(value)
	for _, existing := range AllowedJobStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobStateEnum", value)
}

// NewJobStateEnumFromValue returns a pointer to a valid JobStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobStateEnumFromValue(v string) (*JobStateEnum, error) {
	ev := JobStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobStateEnum: valid values are %v", v, AllowedJobStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobStateEnum) IsValid() bool {
	for _, existing := range AllowedJobStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobStateEnum value
func (v JobStateEnum) Ptr() *JobStateEnum {
	return &v
}

type NullableJobStateEnum struct {
	value *JobStateEnum
	isSet bool
}

func (v NullableJobStateEnum) Get() *JobStateEnum {
	return v.value
}

func (v *NullableJobStateEnum) Set(val *JobStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableJobStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableJobStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobStateEnum(val *JobStateEnum) *NullableJobStateEnum {
	return &NullableJobStateEnum{value: val, isSet: true}
}

func (v NullableJobStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

