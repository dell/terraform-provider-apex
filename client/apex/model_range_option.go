/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RangeOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeOption{}

// RangeOption Model for providing range option
type RangeOption struct {
	// Display name of the option
	Name string `json:"name"`
	// Description of the option
	Description *string `json:"description,omitempty"`
	// Minimum value for the range selection
	MinValue int64 `json:"min_value"`
	// Maximum value for the range selection
	MaxValue int64 `json:"max_value"`
	// Linear interval for the range to increase
	LinearInterval int64 `json:"linear_interval"`
	// Unit for the range
	Unit string `json:"unit"`
	// Default value for the range
	DefaultValue *int64 `json:"default_value,omitempty"`
	// Is it mandatory
	IsConfigurable bool `json:"is_configurable"`
	// Type of the option
	Type string `json:"type"`
}

type _RangeOption RangeOption

// NewRangeOption instantiates a new RangeOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeOption(name string, minValue int64, maxValue int64, linearInterval int64, unit string, isConfigurable bool, type_ string) *RangeOption {
	this := RangeOption{}
	this.Name = name
	this.MinValue = minValue
	this.MaxValue = maxValue
	this.LinearInterval = linearInterval
	this.Unit = unit
	this.IsConfigurable = isConfigurable
	this.Type = type_
	return &this
}

// NewRangeOptionWithDefaults instantiates a new RangeOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeOptionWithDefaults() *RangeOption {
	this := RangeOption{}
	var type_ string = "RANGE"
	this.Type = type_
	return &this
}

// GetName returns the Name field value
func (o *RangeOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RangeOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RangeOption) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RangeOption) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeOption) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RangeOption) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RangeOption) SetDescription(v string) {
	o.Description = &v
}

// GetMinValue returns the MinValue field value
func (o *RangeOption) GetMinValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value
// and a boolean to check if the value has been set.
func (o *RangeOption) GetMinValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinValue, true
}

// SetMinValue sets field value
func (o *RangeOption) SetMinValue(v int64) {
	o.MinValue = v
}

// GetMaxValue returns the MaxValue field value
func (o *RangeOption) GetMaxValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value
// and a boolean to check if the value has been set.
func (o *RangeOption) GetMaxValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxValue, true
}

// SetMaxValue sets field value
func (o *RangeOption) SetMaxValue(v int64) {
	o.MaxValue = v
}

// GetLinearInterval returns the LinearInterval field value
func (o *RangeOption) GetLinearInterval() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LinearInterval
}

// GetLinearIntervalOk returns a tuple with the LinearInterval field value
// and a boolean to check if the value has been set.
func (o *RangeOption) GetLinearIntervalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinearInterval, true
}

// SetLinearInterval sets field value
func (o *RangeOption) SetLinearInterval(v int64) {
	o.LinearInterval = v
}

// GetUnit returns the Unit field value
func (o *RangeOption) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *RangeOption) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *RangeOption) SetUnit(v string) {
	o.Unit = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *RangeOption) GetDefaultValue() int64 {
	if o == nil || IsNil(o.DefaultValue) {
		var ret int64
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RangeOption) GetDefaultValueOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *RangeOption) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given int64 and assigns it to the DefaultValue field.
func (o *RangeOption) SetDefaultValue(v int64) {
	o.DefaultValue = &v
}

// GetIsConfigurable returns the IsConfigurable field value
func (o *RangeOption) GetIsConfigurable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsConfigurable
}

// GetIsConfigurableOk returns a tuple with the IsConfigurable field value
// and a boolean to check if the value has been set.
func (o *RangeOption) GetIsConfigurableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsConfigurable, true
}

// SetIsConfigurable sets field value
func (o *RangeOption) SetIsConfigurable(v bool) {
	o.IsConfigurable = v
}

// GetType returns the Type field value
func (o *RangeOption) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RangeOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RangeOption) SetType(v string) {
	o.Type = v
}

func (o RangeOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["min_value"] = o.MinValue
	toSerialize["max_value"] = o.MaxValue
	toSerialize["linear_interval"] = o.LinearInterval
	toSerialize["unit"] = o.Unit
	if !IsNil(o.DefaultValue) {
		toSerialize["default_value"] = o.DefaultValue
	}
	toSerialize["is_configurable"] = o.IsConfigurable
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *RangeOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"min_value",
		"max_value",
		"linear_interval",
		"unit",
		"is_configurable",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRangeOption := _RangeOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRangeOption)

	if err != nil {
		return err
	}

	*o = RangeOption(varRangeOption)

	return err
}

type NullableRangeOption struct {
	value *RangeOption
	isSet bool
}

func (v NullableRangeOption) Get() *RangeOption {
	return v.value
}

func (v *NullableRangeOption) Set(val *RangeOption) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeOption) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeOption(val *RangeOption) *NullableRangeOption {
	return &NullableRangeOption{value: val, isSet: true}
}

func (v NullableRangeOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


