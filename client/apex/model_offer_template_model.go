/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OfferTemplateModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferTemplateModel{}

// OfferTemplateModel Model for exposing the storage products specific offer template
type OfferTemplateModel struct {
	// 
	Id *string `json:"id,omitempty"`
	SystemType StorageProductEnum `json:"system_type"`
	// Version of the storage product
	StorageProductVersion string `json:"storage_product_version"`
	CloudType CloudProviderEnum `json:"cloud_type"`
	// Supported tier information of storage product 
	SupportedTierInfo []TierInfo `json:"supported_tier_info"`
}

type _OfferTemplateModel OfferTemplateModel

// NewOfferTemplateModel instantiates a new OfferTemplateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferTemplateModel(systemType StorageProductEnum, storageProductVersion string, cloudType CloudProviderEnum, supportedTierInfo []TierInfo) *OfferTemplateModel {
	this := OfferTemplateModel{}
	this.SystemType = systemType
	this.StorageProductVersion = storageProductVersion
	this.CloudType = cloudType
	this.SupportedTierInfo = supportedTierInfo
	return &this
}

// NewOfferTemplateModelWithDefaults instantiates a new OfferTemplateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferTemplateModelWithDefaults() *OfferTemplateModel {
	this := OfferTemplateModel{}
	var cloudType CloudProviderEnum = CLOUDPROVIDERENUM_AWS
	this.CloudType = cloudType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OfferTemplateModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferTemplateModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OfferTemplateModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OfferTemplateModel) SetId(v string) {
	o.Id = &v
}

// GetSystemType returns the SystemType field value
func (o *OfferTemplateModel) GetSystemType() StorageProductEnum {
	if o == nil {
		var ret StorageProductEnum
		return ret
	}

	return o.SystemType
}

// GetSystemTypeOk returns a tuple with the SystemType field value
// and a boolean to check if the value has been set.
func (o *OfferTemplateModel) GetSystemTypeOk() (*StorageProductEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemType, true
}

// SetSystemType sets field value
func (o *OfferTemplateModel) SetSystemType(v StorageProductEnum) {
	o.SystemType = v
}

// GetStorageProductVersion returns the StorageProductVersion field value
func (o *OfferTemplateModel) GetStorageProductVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageProductVersion
}

// GetStorageProductVersionOk returns a tuple with the StorageProductVersion field value
// and a boolean to check if the value has been set.
func (o *OfferTemplateModel) GetStorageProductVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageProductVersion, true
}

// SetStorageProductVersion sets field value
func (o *OfferTemplateModel) SetStorageProductVersion(v string) {
	o.StorageProductVersion = v
}

// GetCloudType returns the CloudType field value
func (o *OfferTemplateModel) GetCloudType() CloudProviderEnum {
	if o == nil {
		var ret CloudProviderEnum
		return ret
	}

	return o.CloudType
}

// GetCloudTypeOk returns a tuple with the CloudType field value
// and a boolean to check if the value has been set.
func (o *OfferTemplateModel) GetCloudTypeOk() (*CloudProviderEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudType, true
}

// SetCloudType sets field value
func (o *OfferTemplateModel) SetCloudType(v CloudProviderEnum) {
	o.CloudType = v
}

// GetSupportedTierInfo returns the SupportedTierInfo field value
func (o *OfferTemplateModel) GetSupportedTierInfo() []TierInfo {
	if o == nil {
		var ret []TierInfo
		return ret
	}

	return o.SupportedTierInfo
}

// GetSupportedTierInfoOk returns a tuple with the SupportedTierInfo field value
// and a boolean to check if the value has been set.
func (o *OfferTemplateModel) GetSupportedTierInfoOk() ([]TierInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedTierInfo, true
}

// SetSupportedTierInfo sets field value
func (o *OfferTemplateModel) SetSupportedTierInfo(v []TierInfo) {
	o.SupportedTierInfo = v
}

func (o OfferTemplateModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferTemplateModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["system_type"] = o.SystemType
	toSerialize["storage_product_version"] = o.StorageProductVersion
	toSerialize["cloud_type"] = o.CloudType
	toSerialize["supported_tier_info"] = o.SupportedTierInfo
	return toSerialize, nil
}

func (o *OfferTemplateModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"system_type",
		"storage_product_version",
		"cloud_type",
		"supported_tier_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOfferTemplateModel := _OfferTemplateModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOfferTemplateModel)

	if err != nil {
		return err
	}

	*o = OfferTemplateModel(varOfferTemplateModel)

	return err
}

type NullableOfferTemplateModel struct {
	value *OfferTemplateModel
	isSet bool
}

func (v NullableOfferTemplateModel) Get() *OfferTemplateModel {
	return v.value
}

func (v *NullableOfferTemplateModel) Set(val *OfferTemplateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferTemplateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferTemplateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferTemplateModel(val *OfferTemplateModel) *NullableOfferTemplateModel {
	return &NullableOfferTemplateModel{value: val, isSet: true}
}

func (v NullableOfferTemplateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferTemplateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


