/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// TierOptionValue - struct for TierOptionValue
type TierOptionValue struct {
	BooleanOption *BooleanOption
	EnumOption *EnumOption
	FreeTextOption *FreeTextOption
	MultiselectFreetextOption *MultiselectFreetextOption
	RangeOption *RangeOption
}

// BooleanOptionAsTierOptionValue is a convenience function that returns BooleanOption wrapped in TierOptionValue
func BooleanOptionAsTierOptionValue(v *BooleanOption) TierOptionValue {
	return TierOptionValue{
		BooleanOption: v,
	}
}

// EnumOptionAsTierOptionValue is a convenience function that returns EnumOption wrapped in TierOptionValue
func EnumOptionAsTierOptionValue(v *EnumOption) TierOptionValue {
	return TierOptionValue{
		EnumOption: v,
	}
}

// FreeTextOptionAsTierOptionValue is a convenience function that returns FreeTextOption wrapped in TierOptionValue
func FreeTextOptionAsTierOptionValue(v *FreeTextOption) TierOptionValue {
	return TierOptionValue{
		FreeTextOption: v,
	}
}

// MultiselectFreetextOptionAsTierOptionValue is a convenience function that returns MultiselectFreetextOption wrapped in TierOptionValue
func MultiselectFreetextOptionAsTierOptionValue(v *MultiselectFreetextOption) TierOptionValue {
	return TierOptionValue{
		MultiselectFreetextOption: v,
	}
}

// RangeOptionAsTierOptionValue is a convenience function that returns RangeOption wrapped in TierOptionValue
func RangeOptionAsTierOptionValue(v *RangeOption) TierOptionValue {
	return TierOptionValue{
		RangeOption: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TierOptionValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BooleanOption
	err = newStrictDecoder(data).Decode(&dst.BooleanOption)
	if err == nil {
		jsonBooleanOption, _ := json.Marshal(dst.BooleanOption)
		if string(jsonBooleanOption) == "{}" { // empty struct
			dst.BooleanOption = nil
		} else {
			match++
		}
	} else {
		dst.BooleanOption = nil
	}

	// try to unmarshal data into EnumOption
	err = newStrictDecoder(data).Decode(&dst.EnumOption)
	if err == nil {
		jsonEnumOption, _ := json.Marshal(dst.EnumOption)
		if string(jsonEnumOption) == "{}" { // empty struct
			dst.EnumOption = nil
		} else {
			match++
		}
	} else {
		dst.EnumOption = nil
	}

	// try to unmarshal data into FreeTextOption
	err = newStrictDecoder(data).Decode(&dst.FreeTextOption)
	if err == nil {
		jsonFreeTextOption, _ := json.Marshal(dst.FreeTextOption)
		if string(jsonFreeTextOption) == "{}" { // empty struct
			dst.FreeTextOption = nil
		} else {
			match++
		}
	} else {
		dst.FreeTextOption = nil
	}

	// try to unmarshal data into MultiselectFreetextOption
	err = newStrictDecoder(data).Decode(&dst.MultiselectFreetextOption)
	if err == nil {
		jsonMultiselectFreetextOption, _ := json.Marshal(dst.MultiselectFreetextOption)
		if string(jsonMultiselectFreetextOption) == "{}" { // empty struct
			dst.MultiselectFreetextOption = nil
		} else {
			match++
		}
	} else {
		dst.MultiselectFreetextOption = nil
	}

	// try to unmarshal data into RangeOption
	err = newStrictDecoder(data).Decode(&dst.RangeOption)
	if err == nil {
		jsonRangeOption, _ := json.Marshal(dst.RangeOption)
		if string(jsonRangeOption) == "{}" { // empty struct
			dst.RangeOption = nil
		} else {
			match++
		}
	} else {
		dst.RangeOption = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BooleanOption = nil
		dst.EnumOption = nil
		dst.FreeTextOption = nil
		dst.MultiselectFreetextOption = nil
		dst.RangeOption = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TierOptionValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TierOptionValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TierOptionValue) MarshalJSON() ([]byte, error) {
	if src.BooleanOption != nil {
		return json.Marshal(&src.BooleanOption)
	}

	if src.EnumOption != nil {
		return json.Marshal(&src.EnumOption)
	}

	if src.FreeTextOption != nil {
		return json.Marshal(&src.FreeTextOption)
	}

	if src.MultiselectFreetextOption != nil {
		return json.Marshal(&src.MultiselectFreetextOption)
	}

	if src.RangeOption != nil {
		return json.Marshal(&src.RangeOption)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TierOptionValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BooleanOption != nil {
		return obj.BooleanOption
	}

	if obj.EnumOption != nil {
		return obj.EnumOption
	}

	if obj.FreeTextOption != nil {
		return obj.FreeTextOption
	}

	if obj.MultiselectFreetextOption != nil {
		return obj.MultiselectFreetextOption
	}

	if obj.RangeOption != nil {
		return obj.RangeOption
	}

	// all schemas are nil
	return nil
}

type NullableTierOptionValue struct {
	value *TierOptionValue
	isSet bool
}

func (v NullableTierOptionValue) Get() *TierOptionValue {
	return v.value
}

func (v *NullableTierOptionValue) Set(val *TierOptionValue) {
	v.value = val
	v.isSet = true
}

func (v NullableTierOptionValue) IsSet() bool {
	return v.isSet
}

func (v *NullableTierOptionValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierOptionValue(val *TierOptionValue) *NullableTierOptionValue {
	return &NullableTierOptionValue{value: val, isSet: true}
}

func (v NullableTierOptionValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierOptionValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


