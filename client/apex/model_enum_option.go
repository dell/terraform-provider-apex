/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EnumOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnumOption{}

// EnumOption Model for providing enumeration option
type EnumOption struct {
	// Display name of the option
	Name string `json:"name"`
	// Description of the option
	Description string `json:"description"`
	// All the available values for the option
	AvailableOptions []string `json:"available_options"`
	// Default value for the option
	DefaultValue *string `json:"default_value,omitempty"`
	// Is it mandatory
	IsConfigurable bool `json:"is_configurable"`
	// Type of the option
	Type string `json:"type"`
}

type _EnumOption EnumOption

// NewEnumOption instantiates a new EnumOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumOption(name string, description string, availableOptions []string, isConfigurable bool, type_ string) *EnumOption {
	this := EnumOption{}
	this.Name = name
	this.Description = description
	this.AvailableOptions = availableOptions
	this.IsConfigurable = isConfigurable
	this.Type = type_
	return &this
}

// NewEnumOptionWithDefaults instantiates a new EnumOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumOptionWithDefaults() *EnumOption {
	this := EnumOption{}
	var type_ string = "ENUMERATION"
	this.Type = type_
	return &this
}

// GetName returns the Name field value
func (o *EnumOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnumOption) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnumOption) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *EnumOption) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EnumOption) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EnumOption) SetDescription(v string) {
	o.Description = v
}

// GetAvailableOptions returns the AvailableOptions field value
func (o *EnumOption) GetAvailableOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AvailableOptions
}

// GetAvailableOptionsOk returns a tuple with the AvailableOptions field value
// and a boolean to check if the value has been set.
func (o *EnumOption) GetAvailableOptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableOptions, true
}

// SetAvailableOptions sets field value
func (o *EnumOption) SetAvailableOptions(v []string) {
	o.AvailableOptions = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *EnumOption) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumOption) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *EnumOption) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *EnumOption) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetIsConfigurable returns the IsConfigurable field value
func (o *EnumOption) GetIsConfigurable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsConfigurable
}

// GetIsConfigurableOk returns a tuple with the IsConfigurable field value
// and a boolean to check if the value has been set.
func (o *EnumOption) GetIsConfigurableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsConfigurable, true
}

// SetIsConfigurable sets field value
func (o *EnumOption) SetIsConfigurable(v bool) {
	o.IsConfigurable = v
}

// GetType returns the Type field value
func (o *EnumOption) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EnumOption) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EnumOption) SetType(v string) {
	o.Type = v
}

func (o EnumOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnumOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["available_options"] = o.AvailableOptions
	if !IsNil(o.DefaultValue) {
		toSerialize["default_value"] = o.DefaultValue
	}
	toSerialize["is_configurable"] = o.IsConfigurable
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *EnumOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"available_options",
		"is_configurable",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnumOption := _EnumOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnumOption)

	if err != nil {
		return err
	}

	*o = EnumOption(varEnumOption)

	return err
}

type NullableEnumOption struct {
	value *EnumOption
	isSet bool
}

func (v NullableEnumOption) Get() *EnumOption {
	return v.value
}

func (v *NullableEnumOption) Set(val *EnumOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumOption(val *EnumOption) *NullableEnumOption {
	return &NullableEnumOption{value: val, isSet: true}
}

func (v NullableEnumOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


