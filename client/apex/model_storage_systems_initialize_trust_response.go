/*
APEX Navigator for Multicloud Storage REST APIs

The public API definitions for APEX Navigator for Multicloud Storage

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageSystemsInitializeTrustResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSystemsInitializeTrustResponse{}

// StorageSystemsInitializeTrustResponse Response object from initializing the trust between on-prem storage system and APEX Navigator for Multicloud Storage.
type StorageSystemsInitializeTrustResponse struct {
	// Client name for establish the trust between on-prem storage system and APEX Navigator for Multicloud Storage.
	Name string `json:"name"`
	// Public key to encrypt the client secret.
	EncryptionKey string `json:"encryption_key"`
	// The location where the Storage System Authorization server sends the user once the APEX Navigator for Multicloud Storage  has been successfully authorized and granted an authorization code or access token.
	RedirectUris []string `json:"redirect_uris"`
}

type _StorageSystemsInitializeTrustResponse StorageSystemsInitializeTrustResponse

// NewStorageSystemsInitializeTrustResponse instantiates a new StorageSystemsInitializeTrustResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSystemsInitializeTrustResponse(name string, encryptionKey string, redirectUris []string) *StorageSystemsInitializeTrustResponse {
	this := StorageSystemsInitializeTrustResponse{}
	this.Name = name
	this.EncryptionKey = encryptionKey
	this.RedirectUris = redirectUris
	return &this
}

// NewStorageSystemsInitializeTrustResponseWithDefaults instantiates a new StorageSystemsInitializeTrustResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSystemsInitializeTrustResponseWithDefaults() *StorageSystemsInitializeTrustResponse {
	this := StorageSystemsInitializeTrustResponse{}
	return &this
}

// GetName returns the Name field value
func (o *StorageSystemsInitializeTrustResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StorageSystemsInitializeTrustResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StorageSystemsInitializeTrustResponse) SetName(v string) {
	o.Name = v
}

// GetEncryptionKey returns the EncryptionKey field value
func (o *StorageSystemsInitializeTrustResponse) GetEncryptionKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value
// and a boolean to check if the value has been set.
func (o *StorageSystemsInitializeTrustResponse) GetEncryptionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionKey, true
}

// SetEncryptionKey sets field value
func (o *StorageSystemsInitializeTrustResponse) SetEncryptionKey(v string) {
	o.EncryptionKey = v
}

// GetRedirectUris returns the RedirectUris field value
func (o *StorageSystemsInitializeTrustResponse) GetRedirectUris() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value
// and a boolean to check if the value has been set.
func (o *StorageSystemsInitializeTrustResponse) GetRedirectUrisOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUris, true
}

// SetRedirectUris sets field value
func (o *StorageSystemsInitializeTrustResponse) SetRedirectUris(v []string) {
	o.RedirectUris = v
}

func (o StorageSystemsInitializeTrustResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSystemsInitializeTrustResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["encryption_key"] = o.EncryptionKey
	toSerialize["redirect_uris"] = o.RedirectUris
	return toSerialize, nil
}

func (o *StorageSystemsInitializeTrustResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"encryption_key",
		"redirect_uris",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageSystemsInitializeTrustResponse := _StorageSystemsInitializeTrustResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageSystemsInitializeTrustResponse)

	if err != nil {
		return err
	}

	*o = StorageSystemsInitializeTrustResponse(varStorageSystemsInitializeTrustResponse)

	return err
}

type NullableStorageSystemsInitializeTrustResponse struct {
	value *StorageSystemsInitializeTrustResponse
	isSet bool
}

func (v NullableStorageSystemsInitializeTrustResponse) Get() *StorageSystemsInitializeTrustResponse {
	return v.value
}

func (v *NullableStorageSystemsInitializeTrustResponse) Set(val *StorageSystemsInitializeTrustResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSystemsInitializeTrustResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSystemsInitializeTrustResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSystemsInitializeTrustResponse(val *StorageSystemsInitializeTrustResponse) *NullableStorageSystemsInitializeTrustResponse {
	return &NullableStorageSystemsInitializeTrustResponse{value: val, isSet: true}
}

func (v NullableStorageSystemsInitializeTrustResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSystemsInitializeTrustResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


